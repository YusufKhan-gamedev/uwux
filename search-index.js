var searchIndex = JSON.parse('{\
"aero_syscall":{"doc":"","t":[17,17,17,4,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,18,18,18,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,18,18,13,18,18,18,17,17,18,13,18,18,18,18,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,17,17,13,13,13,4,13,4,3,3,3,4,3,18,18,18,18,18,17,17,17,18,3,3,3,3,3,13,13,3,18,18,18,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,12,0,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,18,17,17,17,17,17,17,17,17,17,17,3,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,12,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,11,12,11,12,11,12,12,11,12,12,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,3,4,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,5,5,5],"n":["AF_INET","AF_UNIX","AT_FDCWD","AeroSyscallError","BS0","BS1","BSDLY","CLOCAL","CR0","CR1","CR2","CR3","CRDLY","CREAD","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","Device","Directory","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EALREADY","EBADF","EBADFD","EBADMSG","EBUSY","ECANCELED","ECHILD","ECHO","ECHOE","ECHOK","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELOOP","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENOPROTOOPT","ENOSPC","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EROFS","ESHUTDOWN","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETXTBSY","EXDEV","FF0","FF1","FFDLY","File","HUPCL","ICANON","IEXTEN","IPPROTO_TCP","IPPROTO_UDP","ISIG","Inet","MAP_ANONYOMUS","MAP_FIXED","MAP_PRIVATE","MAP_SHARED","MMapFlags","MMapProt","NL0","NL1","NLDLY","NOFLSH","OCRNL","OFDEL","OFILL","ONLCR","ONLRET","ONOCR","OPOST","O_ACCMODE","O_APPEND","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EXCL","O_EXEC","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SEARCH","O_SYNC","O_TRUNC","O_WRONLY","OpenFlags","PARENB","PARODD","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","SOCK_DGRAM","SOCK_STREAM","SeekCur","SeekEnd","SeekSet","SeekWhence","Socket","SocketAddr","SocketAddrInet","SocketAddrUnix","SysDirEntry","SysFileType","SysInfo","TAB0","TAB1","TAB2","TAB3","TABDLY","TCGETS","TCSETSF","TIOCGWINSZ","TOSTOP","Termios","TermiosCFlag","TermiosLFlag","TermiosOFlag","TimeSpec","Unix","Unknown","Utsname","VT0","VT1","VTDLY","WinSize","_f","address","all","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bufferram","c_cc","c_cflag","c_iflag","c_ispeed","c_lflag","c_line","c_oflag","c_ospeed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","consts","contains","contains","contains","contains","contains","contains","default","default","default","default","default","default","default","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","family","family","file_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freehigh","freeram","freeswap","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","inode","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","loads","machine","machine","mem_unit","name","name","name","ne","ne","ne","ne","ne","ne","nodename","nodename","not","not","not","not","not","not","offset","pad","padding","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","port","prelude","procs","reclen","release","release","remove","remove","remove","remove","remove","remove","set","set","set","set","set","set","sharedram","signal","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","sys_accept","sys_access","sys_bind","sys_chdir","sys_clone","sys_close","sys_connect","sys_dup","sys_dup2","sys_exec","sys_exit","sys_fcntl","sys_fork","sys_getcwd","sys_getdents","sys_gethostname","sys_getpid","sys_gettid","sys_gettime","sys_info","sys_ioctl","sys_listen","sys_log","sys_mkdir","sys_mkdirat","sys_mmap","sys_munmap","sys_open","sys_pipe","sys_read","sys_rmdir","sys_seek","sys_sethostname","sys_shutdown","sys_sigaction","sys_sigprocmask","sys_sigreturn","sys_sleep","sys_socket","sys_uname","sys_unlink","sys_waitpid","sys_write","syscall","syscall_as_str","syscall_result_as_usize","toggle","toggle","toggle","toggle","toggle","toggle","totalhigh","totalram","totalswap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tv_nsec","tv_sec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","uptime","version","version","ws_col","ws_row","ws_xpixel","ws_ypixel","0","0","CLOEXEC","FBIOGET_VSCREENINFO","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","FdFlags","FramebufferBitField","FramebufferVScreenInfo","SYS_ACCEPT","SYS_ACCESS","SYS_ARCH_PRCTL","SYS_BIND","SYS_CHDIR","SYS_CLONE","SYS_CLOSE","SYS_CONNECT","SYS_DUP","SYS_DUP2","SYS_EXEC","SYS_EXIT","SYS_FCNTL","SYS_FORK","SYS_GETCWD","SYS_GETDENTS","SYS_GETHOSTNAME","SYS_GETPID","SYS_GETTID","SYS_GETTIME","SYS_INFO","SYS_IOCTL","SYS_LISTEN","SYS_LOG","SYS_MKDIR","SYS_MKDIR_AT","SYS_MMAP","SYS_MUNMAP","SYS_OPEN","SYS_PIPE","SYS_READ","SYS_REBOOT","SYS_RMDIR","SYS_SEEK","SYS_SETHOSTNAME","SYS_SHUTDOWN","SYS_SIGACTION","SYS_SIGPROCMASK","SYS_SIGRETURN","SYS_SLEEP","SYS_SOCKET","SYS_UNAME","SYS_UNLINK","SYS_WAITPID","SYS_WRITE","accel_flags","activate","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits_per_pixel","bitxor","bitxor_assign","blue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","colorspace","complement","contains","default","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","grayscale","green","hash","height","hsync_len","insert","intersection","intersects","into","into","into","is_all","is_empty","left_margin","length","lower_margin","msb_right","ne","nonstd","not","offset","partial_cmp","pixclock","red","remove","reserved","right_margin","rotate","set","sub","sub_assign","symmetric_difference","sync","toggle","transp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","upper_margin","vmode","vsync_len","width","xoffset","xres","xres_virtual","yoffset","yres","yres_virtual","Block","Default","Handle","Ignore","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGKILL","SIGPIPE","SIGQUIT","SIGSEGV","SIGSTOP","SIGTERM","SIGTSTP","Set","SigAction","SigProcMask","SignalFlags","SignalHandler","Unblock","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","complement","contains","default","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","is_all","is_empty","ne","ne","new","not","partial_cmp","remove","sa_flags","sa_handler","sa_mask","sa_sigaction","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","0","syscall0","syscall1","syscall2","syscall3","syscall4","syscall5","syscall6"],"q":["aero_syscallaero_syscall::SocketAddr","","aero_syscall::consts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_syscall::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aero_syscall::signal::SignalHandler","aero_syscall::syscall","","","","","",""],"deturns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Memory used by buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Available memory size.","Swap space still available.","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","1, 5, and 15 minute load averages","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Amount of shared memory.","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","Total usable main memory size.","Total swap space size.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Seconds since boot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","Returns the complement of this set of flags.","","","","","Removes the specified flags in-place.","","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","",""],"i":[0,0,0,0,1,1,1,2,1,1,1,1,1,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,3,2,5,5,0,0,5,6,7,7,7,7,0,0,1,1,1,5,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,2,2,9,9,9,9,0,0,10,10,10,0,3,0,0,0,0,0,0,1,1,1,1,1,0,0,0,5,0,0,0,0,0,6,4,0,1,1,1,0,11,12,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,13,14,11,9,7,8,4,3,15,10,16,5,2,1,17,18,12,6,13,14,11,9,7,8,4,3,15,10,16,5,2,1,17,18,12,6,11,17,17,17,17,17,17,17,17,9,7,8,4,15,5,2,1,17,18,12,6,9,7,8,5,2,1,9,7,8,5,2,1,0,9,7,8,5,2,1,14,15,16,5,2,1,17,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,4,5,2,1,9,7,8,5,2,1,18,12,13,9,9,9,9,9,7,7,7,7,7,8,8,8,8,8,4,3,10,5,5,5,5,5,2,2,2,2,2,1,1,1,1,1,17,18,12,6,11,11,11,13,14,11,9,7,8,4,3,15,10,10,16,5,2,1,17,18,12,6,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,13,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,13,14,11,9,7,8,4,3,15,10,16,5,2,1,17,18,12,6,9,7,8,5,2,1,9,7,8,5,2,1,11,14,14,11,14,13,14,9,7,8,5,2,1,14,14,9,7,8,5,2,1,13,11,12,9,7,8,5,2,1,18,12,0,11,13,14,14,9,7,8,5,2,1,9,7,8,5,2,1,11,0,9,7,8,5,2,1,9,7,8,5,2,1,9,7,8,5,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,7,8,5,2,1,11,11,11,13,14,11,9,7,8,4,3,15,10,16,5,2,1,17,18,12,6,13,14,11,9,7,8,4,3,15,10,16,5,2,1,17,18,12,6,15,15,13,14,11,9,7,8,4,3,15,10,16,5,2,1,17,18,12,6,9,7,8,5,2,1,11,14,14,16,16,16,16,19,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,21,21,21,21,21,21,22,21,21,22,21,23,22,21,23,22,21,23,22,21,22,21,21,23,22,21,21,21,21,21,21,21,21,21,21,23,22,21,21,21,21,22,22,21,22,22,21,21,21,21,23,22,21,21,22,23,22,23,21,22,21,23,21,22,22,21,22,22,22,21,21,21,21,22,21,22,21,23,22,21,23,22,21,23,22,21,22,22,22,22,22,22,22,22,22,22,24,25,25,25,26,26,26,26,26,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,24,26,26,26,26,26,26,26,26,25,27,26,24,25,27,26,24,25,27,26,26,26,26,25,26,26,26,25,26,26,25,27,26,26,26,26,26,24,25,25,27,26,24,24,26,26,26,26,26,26,26,26,25,27,26,24,26,26,25,26,27,26,26,26,27,27,27,27,26,26,26,26,26,25,27,26,24,25,27,26,24,25,27,26,24,26,28,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mmapprot",3]]],[[["mmapflags",3]]],[[["openflags",3]]],[[["termioslflag",3]]],[[["termioscflag",3]]],[[["termiosoflag",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["mmapprot",3]],[[],["mmapflags",3]],[[],["openflags",3]],[[],["aerosyscallerror",4]],[[],["timespec",3]],[[],["termioslflag",3]],[[],["termioscflag",3]],[[],["termiosoflag",3]],[[],["termios",3]],[[],["socketaddrunix",3]],[[],["socketaddrinet",3]],[[],["socketaddr",4]],[[["mmapprot",3]],["ordering",4]],[[["mmapflags",3]],["ordering",4]],[[["openflags",3]],["ordering",4]],[[["termioslflag",3]],["ordering",4]],[[["termioscflag",3]],["ordering",4]],[[["termiosoflag",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["timespec",3]],[[],["winsize",3]],[[],["termioslflag",3]],[[],["termioscflag",3]],[[],["termiosoflag",3]],[[],["termios",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mmapprot",3]],["bool",15]],[[["mmapflags",3]],["bool",15]],[[["openflags",3]],["bool",15]],[[["aerosyscallerror",4]],["bool",15]],[[["termioslflag",3]],["bool",15]],[[["termioscflag",3]],["bool",15]],[[["termiosoflag",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["str",15]],null,null,[[],["str",15]],null,null,[[["mmapprot",3]],["bool",15]],[[["mmapflags",3]],["bool",15]],[[["openflags",3]],["bool",15]],[[["termioslflag",3]],["bool",15]],[[["termioscflag",3]],["bool",15]],[[["termiosoflag",3]],["bool",15]],[[],["str",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["mmapprot",3]],["option",4,[["ordering",4]]]],[[["mmapflags",3]],["option",4,[["ordering",4]]]],[[["openflags",3]],["option",4,[["ordering",4]]]],[[["termioslflag",3]],["option",4,[["ordering",4]]]],[[["termioscflag",3]],["option",4,[["ordering",4]]]],[[["termiosoflag",3]],["option",4,[["ordering",4]]]],null,null,null,null,null,[[],["str",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["socketaddr",4],["u32",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["socketaddr",4],["u32",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["socketaddr",4],["u32",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["openflags",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15],["openflags",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15]],["never",15]],[[["usize",15],["usize",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["timespec",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["sysinfo",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["isize",15],["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15],["mmapprot",3],["mmapflags",3],["usize",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["str",15],["openflags",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["openflags",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15],["seekwhence",4]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["str",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[],["never",15]],[[["usize",15],["option",4,[["sigaction",3]]],["option",4,[["sigaction",3]]]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["sigprocmask",4],["u64",15],["option",4,[["u64",15]]]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["timespec",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["usize",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["utsname",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["str",15],["openflags",3]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15],["u32",15],["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],[[["usize",15]],["result",4,[["usize",15],["aerosyscallerror",4]]]],null,[[["usize",15]],["str",15]],[[["result",4,[["usize",15],["aerosyscallerror",4]]]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["fdflags",3]]],[[]],[[],["usize",15]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["fdflags",3]],[[],["framebufferbitfield",3]],[[],["framebuffervscreeninfo",3]],[[["fdflags",3]],["ordering",4]],null,[[]],[[],["bool",15]],[[],["framebufferbitfield",3]],[[],["framebuffervscreeninfo",3]],[[]],[[]],[[["fdflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["intoiterator",8]]],null,null,[[]],null,null,[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,[[["fdflags",3]],["bool",15]],null,[[]],null,[[["fdflags",3]],["option",4,[["ordering",4]]]],null,null,[[]],null,null,null,[[["bool",15]]],[[]],[[]],[[]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["signalflags",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["signalhandler",4]],[[],["sigaction",3]],[[],["signalflags",3]],[[["signalflags",3]],["ordering",4]],[[]],[[],["bool",15]],[[]],[[],["signalflags",3]],[[]],[[]],[[["signalhandler",4]],["bool",15]],[[["signalflags",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[["u64",15]]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signalhandler",4]],["bool",15]],[[["signalflags",3]],["bool",15]],[[["signalhandler",4],["u64",15],["signalflags",3]],["sigaction",3]],[[]],[[["signalflags",3]],["option",4,[["ordering",4]]]],[[]],null,null,null,null,[[["bool",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15],["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15],["usize",15],["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15],["usize",15],["usize",15],["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15],["usize",15],["usize",15],["usize",15],["usize",15],["usize",15]],["usize",15]]],"p":[[3,"TermiosOFlag"],[3,"TermiosCFlag"],[4,"SysFileType"],[4,"AeroSyscallError"],[3,"TermiosLFlag"],[4,"SocketAddr"],[3,"MMapFlags"],[3,"OpenFlags"],[3,"MMapProt"],[4,"SeekWhence"],[3,"SysInfo"],[3,"SocketAddrInet"],[3,"SysDirEntry"],[3,"Utsname"],[3,"TimeSpec"],[3,"WinSize"],[3,"Termios"],[3,"SocketAddrUnix"],[13,"Unix"],[13,"Inet"],[3,"FdFlags"],[3,"FramebufferVScreenInfo"],[3,"FramebufferBitField"],[4,"SigProcMask"],[4,"SignalHandler"],[3,"SignalFlags"],[3,"SigAction"],[13,"Handle"]]},\
"ahash":{"doc":"AHash is a hashing algorithm is intended to be a high …","t":[3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AHasher","CallHasher","RandomState","borrow","borrow","borrow_mut","borrow_mut","build_hasher","clone","clone","clone_into","clone_into","default","default","finish","fmt","fmt","from","from","generate_with","get_hash","into","into","new","new_with_keys","set_random_source","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_seed","with_seeds","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":["ahash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>Hasher</code> for hashing an arbitrary stream of bytes.","Provides a way to get an optimized hasher for a given data …","Provides a Hasher factory. This is typically used (e.g. by …","","","","","Constructs a new AHasher with keys based on this …","","","","","Constructs a new AHasher with fixed keys. If <code>std</code> is …","","","","","","","Allows for supplying seeds, but each time it is called the …","","","","Use randomly generated keys","Creates a new hasher keyed to the provided key.","Provides an optional way to manually supply a source of …","","","","","","","","","Allows for explicitly setting a seed to used.","Allows for explicitly setting the seeds to used.","","","","","","",""],"i":[0,0,0,1,2,1,2,2,1,2,1,2,1,2,1,1,2,1,2,2,3,1,2,2,1,2,1,2,1,2,1,2,1,2,2,2,1,1,1,1,1,1,1],"f":[null,null,null,[[]],[[]],[[]],[[]],[[],["ahasher",3]],[[],["ahasher",3]],[[],["randomstate",3]],[[]],[[]],[[],["ahasher",3]],[[]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15],["u64",15],["u64",15],["u64",15]],["randomstate",3]],[[],["u64",15]],[[]],[[]],[[],["randomstate",3]],[[["u128",15],["u128",15]],["ahasher",3]],[[],["result",4,[["bool",15]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["randomstate",3]],[[["u64",15],["u64",15],["u64",15],["u64",15]],["randomstate",3]],[[]],[[["u128",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]]],"p":[[3,"AHasher"],[3,"RandomState"],[8,"CallHasher"]]},\
"aml":{"doc":"<code>aml</code> is a pure-Rust AML (ACPI Machine Language) parser, …","tn":["AML_INTERPRETER_REVISION","All","AllScopes","AmlContext","AmlError","AmlHandle","AmlName","BreakInInvalidPosition","ContinueInInvalidPosition","DebugVerbosity","Device","EmptyNamesAreInvalid","FatalError","FieldInvalidAccessSize","FieldInvalidAddress","FieldRegionIsNotOpRegion","Handler","IncompatibleValueConversion","InvalidArgAccess","InvalidFieldFlags","InvalidLocalAccess","InvalidNameSeg","InvalidNormalizedName","InvalidPkgLength","InvalidRegionSpace","InvalidShiftLeft","InvalidShiftRight","InvalidStatusObject","InvalidStringConstant","LevelDoesNotExist","LevelType","MalformedBuffer","MalformedPackage","MalformedStream","MethodLocals","NameCollision","NameComponent","Namespace","NamespaceLevel","None","NotExecutingControlMethod","PowerResource","Prefix","Processor","PrtInvalidAddress","PrtInvalidGsi","PrtInvalidPin","PrtInvalidSource","PrtNoEntry","ReservedResourceType","ResourceDescriptorTooLong","ResourceDescriptorTooShort","Root","RootHasNoParent","Scope","Scopes","Segment","ThermalZone","TooManyArgs","TriedToRemoveRootNamespace","TypeCannotBeCompared","TypeCannotBeSliced","UnexpectedByte","UnexpectedEndOfStream","UnexpectedResourceType","UnterminatedStringConstant","ValueDoesNotExist","WrongParser","add_level","add_value","add_value_at_resolved_path","as_segment","as_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_components","from_name_seg","from_str","get","get_by_path","get_by_path_mut","get_handle","get_mut","handle_fatal_error","initialize_objects","into","into","into","into","into","into","into","into","into","invoke_method","is_absolute","is_normal","namespace","ne","ne","ne","ne","new","new","normalize","parent","parse_table","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pci_routing","read_io_u16","read_io_u32","read_io_u8","read_pci_u16","read_pci_u32","read_pci_u8","read_u16","read_u32","read_u64","read_u8","remove_level","resolve","resource","root","search","search_for_level","search_rules_apply","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traverse","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","write_io_u16","write_io_u32","write_io_u8","write_pci_u16","write_pci_u32","write_pci_u8","write_u16","write_u32","write_u64","write_u8","0","0","0","0","0","0","0","0","0","0","current","target","0","Gsi","IntA","IntB","IntC","IntD","LinkObject","PciRoute","PciRouteType","PciRoutingTable","Pin","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_prt_path","into","into","into","into","route","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","ActiveHigh","ActiveLow","Additive","AddressSpace","AddressSpaceDecodeType","AddressSpaceDescriptor","AddressSpaceResourceType","BusNumberRange","CompatibilityMode","DMADescriptor","DMASupportedSpeed","DMATransferTypePreference","Dma","Edge","FixedLocation","IOPort","IOPortDescriptor","IORange","InterruptPolarity","InterruptTrigger","Irq","IrqDescriptor","Level","MemoryRange","MemoryRange","MemoryRangeDescriptor","Resource","Subtractive","TypeA","TypeB","TypeF","_16Bit","_8And16Bit","_8BitOnly","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","dma_format_descriptor","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","irq","is_consumer","is_shared","is_wake_capable","ne","ne","ne","ne","ne","ne","polarity","resource_descriptor_list","to_owned","to_owned","to_owned","to_owned","to_owned","trigger","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","base_address","is_writable","range_length","0","0","0","0","0","0","Aml","AmlType","AmlValue","Any","Args","Boolean","Buffer","Buffer","Buffer","BufferField","BufferField","Byte","DWord","DdbHandle","DebugObject","Device","Device","EmbeddedControl","Event","Field","FieldAccessType","FieldFlags","FieldUnit","FieldUpdateRule","GeneralPurposeIo","GenericSerialBus","IPMI","Integer","Integer","Method","Method","MethodCode","MethodFlags","Mutex","Mutex","Native","ObjReference","OemDefined","OpRegion","OpRegion","Package","Package","PciBarTarget","PciConfig","PowerResource","PowerResource","Preserve","Processor","Processor","QWord","RawDataBuffer","RegionSpace","SMBus","StatusObject","String","String","SystemCmos","SystemIo","SystemMemory","ThermalZone","ThermalZone","Uninitialized","Word","WriteAsOnes","WriteAsZeros","access_type","arg","arg_count","as_bool","as_buffer","as_concat_type","as_integer","as_status","as_string","as_type","battery_present","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","field_update_rule","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_list","functional","into","into","into","into","into","into","into","into","into","into","lock_rule","native_method","ne","ne","ne","ne","new","new","one","ones","present","read_field","serialize","show_in_ui","store_arg","sync_level","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of","write_field","zero","0","0","0","0","0","buffer_data","code","flags","flags","id","length","length","length","offset","offset","offset","parent_device","pblk_address","pblk_len","region","region","resource_order","sync_level","system_level","0","0","0"],"q":["amlaml::AmlError","","","","","","","","","","","","aml::NameComponent","aml::pci_routing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aml::pci_routing::PciRouteType","","aml::resourceaml::resource::MemoryRangeDescriptor","","","aml::resource::Resource","","","","","aml::valueaml::value::AmlValue","","","","","","","","","","","","","","","","","","","","","","","","aml::value::MethodCode","","aml::value::RegionSpace"],"d":["AML has a <code>RevisionOp</code> operator that returns the “AML …","Print heads and tails of all objects, and extra debug …","Print heads and tails when entering and leaving scopes of …","","","A handle is used to refer to an AML value without actually …","","A <code>DefBreak</code> operation was performed outside of a <code>DefWhile</code> …","A <code>DefContinue</code> operation was performed outside of a <code>DefWhile</code>…","Describes how much debug information the parser should …","","","Returned when a <code>DefFatal</code> op is encountered. This is …","","","","","","Produced when a method accesses an argument it does not …","","Produced when a method accesses a local that it has not …","","Produced when trying to normalize a path that does not …","","","","","","","Produced when a sub-level or value is added to a level …","","Produced when a <code>DefBuffer</code> contains more bytes that its …","Produced when a <code>DefPackage</code> contains a different number of …","Produced when the stream evaluates to something other than …","A level of this type is created at the same path as the …","Produced when two values with the same name are added to …","","","","Print no debug information","Produced when AML tries to do something only possible in a …","A <code>PowerResource</code> object’s sub-objects are stored in a …","","A legacy <code>Processor</code> object’s sub-objects are stored in a …","","","","","Produced when the PRT doesn’t contain an entry for the …","","","","","","","Print heads and tails when entering and leaving scopes of …","","A <code>ThermalZone</code> object’s sub-objects are stored in a level …","Tried to invoke a method with too many arguments.","","","Produced when the <code>Mid</code> operator is applied to a value of a …","","","","","","Emitted by a parser when it’s clear that the stream doesn…","Add a new level to the namespace. A “level” is named …","Add a value to the namespace at the given path, which must …","Helper method for adding a value to the namespace at a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a string representation of an AML name into an …","","","","","","","","","","","","","","","","","","","An AML path is normal if it does not contain any prefix …","","","","","","Creates a new <code>AmlContext</code> - the central type in managing …","","Normalize an AML path, resolving prefix chars. Returns …","Get the parent of this <code>AmlName</code>. For example, the parent of …","","","","","","","","","","","","","","","","","","Resolve this path against a given scope, making it …","","","Search for an object at the given path of the namespace, …","","Special rules apply when searching for certain paths …","","","","","","","","","","Traverse the namespace, calling <code>f</code> on each namespace level. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The interrupt is hard-coded to a specific GSI","","","","","The interrupt is linked to a link object. This object will …","","","A <code>PciRoutingTable</code> is used to interpret the data in a <code>_PRT</code> …","","","","","","","","","","","","","","","","","","","","","Construct a <code>PciRoutingTable</code> from a path to a <code>_PRT</code> object. …","","","","","Get the interrupt input that a given PCI interrupt pin is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a <code>ResourceDescriptor</code> into a list of resources. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A control method can take up to 7 arguments, each of which …","","","","","","","","","Handle to a definition block handle. Returned by the <code>Load</code> …","","","","","","Describes a field unit within an operation region.","","","","","","","","","","","","","","","","","","","","Describes an operation region. Some regions require other …","","","","","","","","","","","","","","Representation of the return value of a <code>_STA</code> method, which …","","","","","","","","","","","","","","","","","Converts an <code>AmlValue</code> to the representation that should be …","","Turns an <code>AmlValue</code> returned from a <code>_STA</code> method into a …","","Convert this value to a value of the same data, but with …","Only applicable for Control Method Battery Devices (<code>PNP0C0A</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logically compare two <code>AmlValue</code>s, according to the rules …","","","Whether the device is enabled. Both <code>present</code> and <code>enabled</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the device is physically present. If this is <code>false</code>…","Reads from a field of an opregion, returning either a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","In bits.","","","In bits.","","","","","","","","","","",""],"i":[0,1,1,0,0,0,0,2,2,0,3,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,3,2,0,0,0,1,2,3,4,3,2,2,2,2,2,2,2,2,4,2,3,1,4,3,2,2,2,2,2,2,2,2,2,2,5,5,5,4,6,7,8,3,9,5,6,4,1,2,7,8,3,9,5,6,4,1,2,9,8,3,9,5,6,4,1,2,8,3,9,5,6,4,1,2,8,6,4,1,8,3,6,4,1,2,8,3,9,5,6,6,4,1,2,7,8,3,9,5,6,4,1,2,6,6,6,5,5,5,5,5,10,7,7,8,3,9,5,6,4,1,2,7,6,6,7,8,6,4,2,7,5,6,6,7,8,6,4,1,0,10,10,10,10,10,10,10,10,10,10,5,6,0,6,5,5,6,8,3,9,5,6,4,1,2,6,5,7,8,3,9,5,6,4,1,2,7,8,3,9,5,6,4,1,2,9,7,8,3,9,5,6,4,1,2,0,9,10,10,10,10,10,10,10,10,10,10,11,12,13,14,15,16,17,18,19,20,21,21,22,23,24,24,24,24,23,0,0,0,0,24,23,25,26,24,23,25,26,24,24,24,24,23,25,26,24,23,25,26,26,24,23,25,26,26,24,24,23,25,26,24,23,25,26,24,23,25,26,27,28,29,29,30,31,0,0,0,32,33,0,0,0,31,34,35,31,0,32,0,0,31,0,34,31,32,0,0,30,33,33,33,36,36,36,31,34,29,32,30,37,35,38,33,36,39,40,31,34,29,32,30,37,35,38,33,36,39,40,34,29,32,30,38,34,29,32,30,38,0,31,34,29,32,30,37,35,38,33,36,39,40,31,34,29,32,30,37,35,38,33,36,39,40,31,34,29,32,30,37,35,38,33,36,39,40,31,34,29,32,30,37,35,38,33,36,39,40,38,38,38,38,31,37,35,38,39,40,38,0,34,29,32,30,38,38,31,34,29,32,30,37,35,38,33,36,39,40,31,34,29,32,30,37,35,38,33,36,39,40,31,34,29,32,30,37,35,38,33,36,39,40,41,41,41,42,43,44,45,46,47,48,0,0,49,0,50,49,51,50,51,50,49,49,51,51,51,50,52,51,50,0,0,51,0,52,52,52,51,50,51,50,0,0,51,50,48,51,52,51,50,51,50,52,52,51,50,53,51,50,49,51,0,52,0,51,50,52,52,52,51,50,51,49,53,53,54,47,55,50,50,50,50,50,50,50,56,52,49,53,54,55,56,51,48,50,47,52,49,53,54,55,56,51,48,50,47,52,49,53,54,55,56,51,48,50,47,52,49,53,54,55,56,51,48,50,47,50,56,47,56,52,49,53,54,55,56,51,54,52,49,53,54,55,56,51,48,50,47,52,49,53,54,55,55,56,51,48,50,47,47,56,52,49,53,54,55,56,51,48,50,47,54,50,52,54,55,56,54,55,50,50,56,50,55,56,47,55,52,49,53,54,55,56,51,48,50,47,52,49,53,54,55,56,51,48,50,47,52,49,53,54,55,56,51,48,50,47,52,49,53,54,55,56,51,48,50,47,50,50,50,57,58,59,60,61,62,63,64,63,65,66,64,62,66,64,62,66,65,65,66,64,67,68,67,69,70,71],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["amlname",3],["leveltype",4]],["result",4,[["amlerror",4]]]],[[["amlname",3],["amlvalue",4]],["result",4,[["amlhandle",3],["amlerror",4]]]],[[["amlname",3],["amlname",3],["amlvalue",4]],["result",4,[["amlhandle",3],["amlerror",4]]]],[[],["result",4,[["nameseg",3]]]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["amlhandle",3]],[[],["leveltype",4]],[[],["namespacelevel",3]],[[],["namespace",3]],[[],["amlname",3]],[[],["namecomponent",4]],[[],["debugverbosity",4]],[[],["amlerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["amlhandle",3]],["ordering",4]],[[["amlname",3]],["ordering",4]],[[["namecomponent",4]],["ordering",4]],[[["debugverbosity",4]],["ordering",4]],[[["amlhandle",3]],["bool",15]],[[["leveltype",4]],["bool",15]],[[["amlname",3]],["bool",15]],[[["namecomponent",4]],["bool",15]],[[["debugverbosity",4]],["bool",15]],[[["amlerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["namecomponent",4]]]],["amlname",3]],[[["nameseg",3]],["amlname",3]],[[["str",15]],["result",4,[["amlname",3],["amlerror",4]]]],[[["amlhandle",3]],["result",4,[["amlvalue",4],["amlerror",4]]]],[[["amlname",3]],["result",4,[["amlvalue",4],["amlerror",4]]]],[[["amlname",3]],["result",4,[["amlvalue",4],["amlerror",4]]]],[[["amlname",3]],["result",4,[["amlhandle",3],["amlerror",4]]]],[[["amlhandle",3]],["result",4,[["amlvalue",4],["amlerror",4]]]],[[["u8",15],["u32",15],["u64",15]]],[[],["result",4,[["amlerror",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["amlname",3],["args",3]],["result",4,[["amlvalue",4],["amlerror",4]]]],[[],["bool",15]],[[],["bool",15]],null,[[["amlhandle",3]],["bool",15]],[[["amlname",3]],["bool",15]],[[["namecomponent",4]],["bool",15]],[[["amlerror",4]],["bool",15]],[[["box",3,[["handler",8]]],["debugverbosity",4]],["amlcontext",3]],[[],["namespace",3]],[[],["result",4,[["amlname",3],["amlerror",4]]]],[[],["result",4,[["amlname",3],["amlerror",4]]]],[[],["result",4,[["amlerror",4]]]],[[["amlhandle",3]],["option",4,[["ordering",4]]]],[[["amlname",3]],["option",4,[["ordering",4]]]],[[["namecomponent",4]],["option",4,[["ordering",4]]]],[[["debugverbosity",4]],["option",4,[["ordering",4]]]],null,[[["u16",15]],["u16",15]],[[["u16",15]],["u32",15]],[[["u16",15]],["u8",15]],[[["u16",15],["u8",15],["u8",15],["u8",15],["u16",15]],["u16",15]],[[["u16",15],["u8",15],["u8",15],["u8",15],["u16",15]],["u32",15]],[[["u16",15],["u8",15],["u8",15],["u8",15],["u16",15]],["u8",15]],[[["usize",15]],["u16",15]],[[["usize",15]],["u32",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u8",15]],[[["amlname",3]],["result",4,[["amlerror",4]]]],[[["amlname",3]],["result",4,[["amlname",3],["amlerror",4]]]],null,[[],["amlname",3]],[[["amlname",3],["amlname",3]],["result",4,[["amlerror",4]]]],[[["amlname",3],["amlname",3]],["result",4,[["amlname",3],["amlerror",4]]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4,[["amlerror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["u16",15],["u16",15]]],[[["u16",15],["u32",15]]],[[["u16",15],["u8",15]]],[[["u16",15],["u8",15],["u8",15],["u8",15],["u16",15],["u16",15]]],[[["u16",15],["u8",15],["u8",15],["u8",15],["u16",15],["u32",15]]],[[["u16",15],["u8",15],["u8",15],["u8",15],["u16",15],["u8",15]]],[[["usize",15],["u16",15]]],[[["usize",15],["u32",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u8",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pin",4]],[[]],[[["pin",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["amlname",3],["amlcontext",3]],["result",4,[["pciroutingtable",3],["amlerror",4]]]],[[]],[[]],[[]],[[]],[[["u16",15],["u16",15],["pin",4],["amlcontext",3]],["result",4,[["irqdescriptor",3],["amlerror",4]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["interrupttrigger",4]],[[],["interruptpolarity",4]],[[],["addressspaceresourcetype",4]],[[],["addressspacedecodetype",4]],[[],["irqdescriptor",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["resource",4],["amlerror",4]]]],[[["resource",4]],["bool",15]],[[["interrupttrigger",4]],["bool",15]],[[["interruptpolarity",4]],["bool",15]],[[["addressspaceresourcetype",4]],["bool",15]],[[["addressspacedecodetype",4]],["bool",15]],[[["addressspacedescriptor",3]],["bool",15]],[[["memoryrangedescriptor",4]],["bool",15]],[[["irqdescriptor",3]],["bool",15]],[[["dmasupportedspeed",4]],["bool",15]],[[["dmatransfertypepreference",4]],["bool",15]],[[["dmadescriptor",3]],["bool",15]],[[["ioportdescriptor",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["resource",4]],["bool",15]],[[["addressspacedescriptor",3]],["bool",15]],[[["memoryrangedescriptor",4]],["bool",15]],[[["irqdescriptor",3]],["bool",15]],[[["dmadescriptor",3]],["bool",15]],[[["ioportdescriptor",3]],["bool",15]],null,[[["amlvalue",4]],["result",4,[["vec",3,[["resource",4]]],["amlerror",4]]]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["fieldaccesstype",4],["amlerror",4]]]],[[["u8",15]],["result",4,[["amlvalue",4],["amlerror",4]]]],[[],["u8",15]],[[],["result",4,[["bool",15],["amlerror",4]]]],[[["amlcontext",3]],["result",4,[["arc",3,[["vec",3,[["u8",15]]]]],["amlerror",4]]]],[[],["amlvalue",4]],[[["amlcontext",3]],["result",4,[["u64",15],["amlerror",4]]]],[[],["result",4,[["statusobject",3],["amlerror",4]]]],[[["amlcontext",3]],["result",4,[["string",3],["amlerror",4]]]],[[["amltype",4],["amlcontext",3]],["result",4,[["amlvalue",4],["amlerror",4]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["regionspace",4]],[[],["fieldaccesstype",4]],[[],["fieldupdaterule",4]],[[],["fieldflags",3]],[[],["methodflags",3]],[[],["statusobject",3]],[[],["amltype",4]],[[],["methodcode",4]],[[],["amlvalue",4]],[[],["args",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["amlvalue",4],["amlcontext",3]],["result",4,[["ordering",4],["amlerror",4]]]],[[]],[[],["args",3]],null,[[["regionspace",4]],["bool",15]],[[["fieldaccesstype",4]],["bool",15]],[[["fieldupdaterule",4]],["bool",15]],[[["fieldflags",3]],["bool",15]],[[["methodflags",3]],["bool",15]],[[["statusobject",3]],["bool",15]],[[["amltype",4]],["bool",15]],[[],["result",4,[["fieldupdaterule",4],["amlerror",4]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],["methodflags",3]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["amlvalue",4]]]],["result",4,[["args",3],["amlerror",4]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["u8",15],["bool",15],["u8",15]],["amlvalue",4]],[[["regionspace",4]],["bool",15]],[[["fieldflags",3]],["bool",15]],[[["methodflags",3]],["bool",15]],[[["statusobject",3]],["bool",15]],[[["u8",15]],["fieldflags",3]],[[["u8",15],["bool",15],["u8",15]],["methodflags",3]],[[],["amlvalue",4]],[[],["amlvalue",4]],null,[[["amlcontext",3]],["result",4,[["amlvalue",4],["amlerror",4]]]],[[],["bool",15]],null,[[["u8",15],["amlvalue",4]],["result",4,[["amlerror",4]]]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["amltype",4]],[[["amlvalue",4],["amlcontext",3]],["result",4,[["amlerror",4]]]],[[],["amlvalue",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"DebugVerbosity"],[4,"AmlError"],[4,"LevelType"],[4,"NameComponent"],[3,"Namespace"],[3,"AmlName"],[3,"AmlContext"],[3,"AmlHandle"],[3,"NamespaceLevel"],[8,"Handler"],[13,"UnexpectedByte"],[13,"InvalidRegionSpace"],[13,"InvalidNormalizedName"],[13,"LevelDoesNotExist"],[13,"ValueDoesNotExist"],[13,"NameCollision"],[13,"InvalidArgAccess"],[13,"InvalidLocalAccess"],[13,"TypeCannotBeCompared"],[13,"TypeCannotBeSliced"],[13,"IncompatibleValueConversion"],[13,"Segment"],[4,"PciRouteType"],[4,"Pin"],[3,"PciRoute"],[3,"PciRoutingTable"],[13,"Gsi"],[13,"LinkObject"],[4,"InterruptPolarity"],[4,"AddressSpaceDecodeType"],[4,"Resource"],[4,"AddressSpaceResourceType"],[4,"DMASupportedSpeed"],[4,"InterruptTrigger"],[4,"MemoryRangeDescriptor"],[4,"DMATransferTypePreference"],[3,"AddressSpaceDescriptor"],[3,"IrqDescriptor"],[3,"DMADescriptor"],[3,"IOPortDescriptor"],[13,"FixedLocation"],[13,"Irq"],[13,"AddressSpace"],[13,"MemoryRange"],[13,"IOPort"],[13,"Dma"],[3,"Args"],[4,"MethodCode"],[4,"FieldAccessType"],[4,"AmlValue"],[4,"AmlType"],[4,"RegionSpace"],[4,"FieldUpdateRule"],[3,"FieldFlags"],[3,"MethodFlags"],[3,"StatusObject"],[13,"Boolean"],[13,"Integer"],[13,"String"],[13,"Buffer"],[13,"Package"],[13,"BufferField"],[13,"Method"],[13,"Field"],[13,"Processor"],[13,"OpRegion"],[13,"PowerResource"],[13,"Mutex"],[13,"Aml"],[13,"Native"],[13,"OemDefined"]]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArrayString","ArrayVec","CapacityError","Drain","IntoIter","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_ptr","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","ne","new","new","new","new_const","new_const","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","push","push","push_str","push_unchecked","remaining_capacity","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","take","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write_char","write_str","zero_filled"],"q":["arrayvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","","Return a raw mutable pointer to the vector’s buffer.","Return a mutable slice containing all elements of the …","Return a mutable string slice of the whole <code>ArrayString</code>.","Return a raw pointer to the vector’s buffer.","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","","","","","","Create a new <code>ArrayString</code> from a <code>str</code>.","","Create a new <code>ArrayString</code> from a byte string literal.","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Return the inner fixed size array, if it is full to its …","Return the inner fixed size array.","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return true if the <code>ArrayVec</code> is completely filled to its …","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","Create a new empty <code>ArrayVec</code> (const fn).","Create a new empty <code>ArrayString</code> (const fn).","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Returns the capacity left in the <code>ArrayVec</code>.","Returns the capacity left in the <code>ArrayString</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Returns the ArrayVec, replacing the original with a new …","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","","Create a new <code>ArrayString</code> value fully filled with ASCII …"],"i":[0,0,0,0,0,1,1,1,2,1,1,2,1,2,1,1,3,4,2,2,5,1,1,3,4,2,5,1,2,1,2,1,3,2,5,1,2,1,2,5,1,2,1,2,1,2,1,1,3,4,5,1,1,2,2,5,1,1,3,2,2,5,5,1,1,3,4,2,2,5,2,1,2,1,2,2,1,2,2,1,2,1,1,3,4,2,5,1,1,1,3,4,1,2,1,2,1,2,2,1,2,1,2,2,5,1,2,5,1,2,3,4,3,4,1,2,2,5,1,2,1,1,2,2,1,1,2,1,2,1,1,2,5,3,4,1,1,1,1,2,1,1,1,3,4,2,2,2,5,1,1,3,4,2,5,1,2,2,1,3,4,2,5,2,2,2],"f":[null,null,null,null,null,[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["intoiter",3]],[[],["arraystring",3]],[[],["capacityerror",3]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[["capacityerror",3]],["ordering",4]],[[],["arrayvec",3]],[[],["arraystring",3]],[[]],[[],["str",15]],[[]],[[],["str",15]],[[],["drain",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["capacityerror",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4,[["capacityerror",3,[["str",15]]]]]],[[]],[[],["result",4,[["utf8error",3]]]],[[["intoiterator",8]]],[[["str",15]],["result",4]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[],["intoiter",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["capacityerror",3]],["bool",15]],[[],["arrayvec",3]],[[],["arraystring",3]],[[],["capacityerror",3]],[[],["arrayvec",3]],[[],["arraystring",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["str",15]],["option",4,[["ordering",4]]]],[[["capacityerror",3]],["option",4,[["ordering",4]]]],[[],["option",4]],[[],["option",4,[["char",15]]]],[[["usize",15]],["option",4]],[[]],[[["char",15]]],[[["str",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]],["char",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["capacityerror",3]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4,[["capacityerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["arguments",3]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4,[["capacityerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["capacityerror",3]]]],[[["char",15]],["result",4,[["capacityerror",3,[["char",15]]]]]],[[["str",15]],["result",4,[["capacityerror",3,[["str",15]]]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["char",15]],["result",6]],[[["str",15]],["result",6]],[[]]],"p":[[3,"ArrayVec"],[3,"ArrayString"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]},\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":[18,8,8,10,10,10,10,10,10,10,10,10],"n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":["bit_field","","","","","","","","","","",""],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[1,0,0,2,1,2,1,2,1,2,1,2],"f":[null,null,null,[[],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["rangebounds",8,[["usize",15]]]]],[[["rangebounds",8,[["usize",15]]]]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["rangebounds",8,[["usize",15]]]]],[[["rangebounds",8,[["usize",15]]]]]],"p":[[8,"BitField"],[8,"BitArray"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[null],"p":[]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","","","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigendian",4]],["option",4,[["ordering",4]]]],[[["littleendian",4]],["option",4,[["ordering",4]]]],[[],["f32",15]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["i128",15]],[[]],[[],["i16",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i64",15]],[[],["i64",15]],[[]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[["i128",15]]],[[]],[[["i16",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i64",15]]],[[["i64",15]]],[[]],[[]],[[["i64",15],["usize",15]]],[[["i128",15],["usize",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"cpio_reader":{"doc":"<code>cpio_reader</code>","t":[18,18,18,3,18,18,18,3,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BLOCK_SPECIAL_DEVICE","CHARACTER_SPECIAL_DEVICE","DIRECTORY","Entry","GROUP_EXECUTABLE","GROUP_READABLE","GROUP_WRITABLE","Mode","NAMED_PIPE_FIFO","REGULAR_FILE","SGID","SOCKET","STICKY","SUID","SYMBOLIK_LINK","USER_EXECUTABLE","USER_READABLE","USER_WRITABLE","WORLD_EXECUTABLE","WORLD_READABLE","WORLD_WRITABLE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","complement","contains","dev","devmajor","devminor","difference","empty","eq","eq","extend","file","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","gid","hash","hash","ino","insert","intersection","intersects","into","into","is_all","is_empty","iter_files","mode","mtime","name","ne","ne","nlink","not","partial_cmp","partial_cmp","rdev","rdevmajor","rdevminor","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_into","try_into","type_id","type_id","uid","union"],"q":["cpio_reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Block special device.","Character special device.","Directory.","An entry of a cpio file.","Group executable bit.","Group readable bit.","Group writable bit.","File information.","Named pipe or FIFO.","Regular file.","SGID bit.","Socket.","Sticky bit.","SUID bit.","Symbolik link.","User executable bit.","User readable bit.","User writable bit.","Executable bit for the other groups.","Readable bit for the other groups.","Writable bit for the other groups.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the device number of the device which contained …","Returns the major number of the device which contained the …","Returns the minor number of the device which contained the …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","Returns the content of this file.","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Returns the group id of the owner of the file.","","","Returns the inode number of the file.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns an iterator that iterates over each content of the …","Returns the <code>Mode</code> value of the file, which contains the file…","Returns the modification time of this file.","Returns the filename.","","","Returns the number of links to this file.","Returns the complement of this set of flags.","","","Returns the associated device number if the entry is block …","Returns the associated device major number if the entry is …","Returns the associated device minor number if the entry is …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","Returns the user id of the owner of the file.","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,1,1,2,2,2,1,1,2,1,1,2,2,1,1,1,1,1,2,1,1,1,1,1,2,2,1,2,1,1,1,2,1,1,1,0,2,2,2,2,1,2,1,2,1,2,2,2,1,1,1,1,1,1,2,1,2,1,2,1,2,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["mode",3]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entry",3]],[[],["mode",3]],[[["entry",3]],["ordering",4]],[[["mode",3]],["ordering",4]],[[]],[[],["bool",15]],[[],["option",4,[["u32",15]]]],[[],["option",4,[["u32",15]]]],[[],["option",4,[["u32",15]]]],[[]],[[]],[[["entry",3]],["bool",15]],[[["mode",3]],["bool",15]],[[["intoiterator",8]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]]],[[["u32",15]]],[[["intoiterator",8]]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["mode",3]],[[],["u64",15]],[[],["str",15]],[[["entry",3]],["bool",15]],[[["mode",3]],["bool",15]],[[],["u32",15]],[[]],[[["entry",3]],["option",4,[["ordering",4]]]],[[["mode",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["u32",15]]]],[[],["option",4,[["u32",15]]]],[[],["option",4,[["u32",15]]]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["u32",15]],[[]]],"p":[[3,"Mode"],[3,"Entry"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":[13,13,3,3,4,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,12,6,3,3,4,3,3,3,3,3,13,13,3,3,3,3,4,3,3,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","ne","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","HashMap","IntoIter","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","is_empty","iter","iter_mut","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry_with","replace_entry_with","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in","0","0","0","0","Difference","Drain","DrainFilter","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","intersection","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","remove","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_maphashbrown::hash_map::Entry","","hashbrown::hash_map::RawEntryMut","","hashbrown::hash_setd":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","","","","","","","The layout of the allocation request that failed.","Default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","","Creates a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Set the value of an entry with a custom hasher function.","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","Creates an empty <code>HashMap</code>.","Creates an empty <code>HashMap</code> using the given allocator.","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity using …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","","","","","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value in the set, if any, that …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Visits the values representing the intersection, i.e., the …","","","","","","","","","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","Creates an empty <code>HashSet</code>.","Creates an empty <code>HashSet</code>.","","","","","","","","","Removes a value from the set. Returns whether the value was","Adds a value to the set, replacing the existing value, if …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity.","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity.","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …"],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,3,4,0,0,0,3,4,3,4,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,5,5,6,9,10,5,5,6,9,10,5,5,5,5,12,5,20,5,5,5,5,6,7,8,9,10,11,13,14,3,15,16,17,4,18,19,20,20,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,14,17,5,14,17,14,17,5,15,18,5,15,5,15,5,15,18,5,5,5,3,15,16,4,18,19,16,15,16,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,6,7,8,9,10,11,12,13,15,19,15,15,18,5,5,5,15,4,18,19,15,5,5,6,7,8,9,10,11,13,5,5,6,7,8,9,10,11,12,13,4,3,4,3,4,4,5,5,5,15,18,5,15,18,18,15,18,18,5,5,5,5,6,7,8,9,10,11,12,13,5,6,9,10,20,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,5,5,6,7,8,9,10,11,12,13,14,3,15,16,17,4,18,19,20,20,5,5,5,5,5,5,5,5,21,22,23,24,0,0,0,0,0,0,0,0,0,25,26,27,28,29,30,31,32,33,25,26,27,28,29,30,31,32,33,25,25,25,26,30,31,32,33,25,25,26,30,31,32,33,25,25,25,25,25,29,25,25,25,25,26,27,28,30,31,32,33,25,25,26,27,28,29,30,31,32,33,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,25,26,27,28,29,30,31,32,33,25,25,25,25,25,25,26,27,28,25,25,26,27,28,29,30,31,32,33,25,25,25,25,25,25,26,27,28,29,30,31,32,33,25,25,25,26,30,31,32,33,25,26,27,28,29,30,31,32,33,25,26,27,28,29,30,31,32,33,25,25,26,27,28,29,30,31,32,33,25,25,25,25,25,25,25],"f":[null,null,null,null,null,[[]],[[]],[[],["tryreserveerror",4]],[[]],[[["tryreserveerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[["tryreserveerror",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["entry",4]],null,[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[["intoiterator",8]]],[[],["rawentrymut",4]],[[],["option",4]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["rawoccupiedentrymut",3]],[[]],[[]],[[],["occupiedentry",3]],[[]],[[]],[[["u64",15]]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[]],[[]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[],["rawentrybuilder",3]],[[],["rawentrybuildermut",3]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["rawentrymut",4]],[[],["entry",4]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["occupiederror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4,[["tryreserveerror",4]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["difference",3]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["hashmap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4,[["tryreserveerror",4]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["union",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]]],"p":[[4,"TryReserveError"],[13,"AllocError"],[4,"RawEntryMut"],[4,"Entry"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"OccupiedError"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]},\
"intrusive_collections":{"doc":"Intrusive collections for Rust.","t":[8,4,8,3,13,13,16,8,8,16,16,18,18,16,16,8,16,13,3,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,14,10,10,0,11,11,14,10,0,10,0,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,3,3,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,3,3,4,3,3,3,3,3,13,3,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Adapter","Bound","DefaultLinkOps","DefaultPointerOps","Excluded","Included","Key","KeyAdapter","LinkOps","LinkOps","LinkPtr","NEW","NEW","Ops","Pointer","PointerOps","PointerOps","Unbounded","UnsafeRef","Value","acquire_link","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","container_of","default","deref","eq","fmt","fmt","from","from","from","from_box","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","from_raw","get_key","get_link","get_value","hash","into","into","into","into_box","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","into_raw","intrusive_adapter","link_ops","link_ops_mut","linked_list","ne","new","offset_of","pointer_ops","rbtree","release_link","singly_linked_list","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","xor_linked_list","0","0","Cursor","CursorMut","IntoIter","Iter","Link","LinkOps","LinkedList","LinkedListOps","acquire_link","as_cursor","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_pointer","cursor","cursor_from_ptr","cursor_mut","cursor_mut_from_ptr","default","default","default","drop","fast_clear","fmt","fmt","force_unlink","from","from","from","from","from","from","from","front","front_mut","get","get","insert_after","insert_before","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_linked","is_null","is_null","iter","move_next","move_next","move_prev","move_prev","new","new","next","next","next","next","next","next","next_back","next_back","peek_next","peek_next","peek_prev","peek_prev","pop_back","pop_front","prev","prev","prev","push_back","push_front","release_link","remove","replace_next_or_prev","replace_with","set","set_next","set_next","set_next","set_prev","set_prev","splice_after","splice_before","split_after","split_before","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Black","Color","Cursor","CursorMut","Entry","InsertCursor","IntoIter","Iter","Link","LinkOps","Occupied","RBTree","RBTreeOps","Red","Vacant","acquire_link","as_cursor","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_pointer","color","color","cursor","cursor_from_ptr","cursor_mut","cursor_mut_from_ptr","default","default","default","drop","entry","eq","fast_clear","find","find_mut","fmt","fmt","fmt","force_unlink","from","from","from","from","from","from","from","from","from","from","front","front_mut","get","get","insert","insert","insert","insert_after","insert_before","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_linked","is_null","is_null","iter","left","left","lower_bound","lower_bound_mut","move_next","move_next","move_prev","move_prev","new","new","next","next","next","next","next","next_back","next_back","or_insert","or_insert_with","parent","parent","peek_next","peek_next","peek_prev","peek_prev","prev","prev","range","release_link","remove","replace_next_or_prev","replace_with","right","right","set","set_color","set_color","set_left","set_left","set_next","set_next","set_parent","set_parent","set_prev","set_right","set_right","take","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upper_bound","upper_bound_mut","0","0","Cursor","CursorMut","IntoIter","Iter","Link","LinkOps","SinglyLinkedList","SinglyLinkedListOps","acquire_link","as_cursor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_pointer","cursor","cursor_from_ptr","cursor_mut","cursor_mut_from_ptr","default","default","default","drop","fast_clear","fmt","fmt","force_unlink","from","from","from","from","from","from","from","front","front_mut","get","get","insert_after","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_linked","is_null","is_null","iter","move_next","move_next","new","new","next","next","next","next","next","peek_next","peek_next","pop_front","prev","push_front","release_link","remove_next","replace_next_or_prev","replace_next_with","set","set_next","set_next","splice_after","split_after","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Cursor","CursorMut","IntoIter","Iter","Link","LinkOps","XorLinkedList","XorLinkedListOps","acquire_link","as_cursor","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_pointer","cursor","cursor_from_ptr_and_next","cursor_from_ptr_and_prev","cursor_mut","cursor_mut_from_ptr_and_next","cursor_mut_from_ptr_and_prev","default","default","default","drop","fast_clear","fmt","fmt","force_unlink","from","from","from","from","from","from","from","front","front_mut","get","get","insert_after","insert_before","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_linked","is_null","is_null","iter","move_next","move_next","move_prev","move_prev","new","new","next","next","next","next","next","next_back","next_back","peek_next","peek_next","peek_prev","peek_prev","pop_back","pop_front","prev","prev","push_back","push_front","release_link","remove","replace_next_or_prev","replace_next_or_prev","replace_with","reverse","set","set","set_next","splice_after","splice_before","split_after","split_before","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["intrusive_collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","intrusive_collections::Bound","","intrusive_collections::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","intrusive_collections::rbtreeintrusive_collections::rbtree::Entry","","intrusive_collections::singly_linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","intrusive_collections::xor_linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait for a adapter which allows a type to be inserted …","An endpoint of a range of keys.","The default implementation of <code>LinkOps</code> associated with a …","The <code>PointerOps</code> type used by an <code>Adapter</code> generated by …","An exclusive bound.","An inclusive bound.","Type of the key returned by <code>get_key</code>.","Extension of the <code>Adapter</code> trait to provide a way of …","Base trait for link operations.","Collection-specific link operations which allow an object …","The link pointer type.","The associated constant that represents <code>Ops::default()</code>.","The associated constant that represents <code>Ops::default()</code>.","The default link operations.","Pointer type which owns an instance of a value.","Trait for pointer conversion operations.","Collection-specific pointer conversions which allow an …","An infinite endpoint. Indicates that there is no bound in …","Unchecked shared pointer","Object type which is inserted into an intrusive collection.","Attempts to acquire ownership of a link so that it can be …","","","","","","","","","","","","","","","Unsafe macro to get a raw pointer to an outer object from …","","","","","","","","","Creates an <code>UnsafeRef</code> from a <code>Box</code>","Constructs an owned pointer from a raw pointer.","Creates an <code>UnsafeRef</code> from a raw pointer","","","","","","","","","","","Gets the key for the given object.","Gets a reference to the link for the given object.","Gets a reference to an object from a reference to a link …","","","","","Converts an <code>UnsafeRef</code> into a <code>Box</code>","Consumes the owned pointer and returns a raw pointer to …","Converts an <code>UnsafeRef</code> into a raw pointer","","","","","","","","","","","Macro to generate an implementation of <code>Adapter</code> for a given …","Returns a reference to the link operations.","Returns a reference to the mutable link operations.","Intrusive doubly-linked list.","","Constructs an instance of <code>DefaultPointerOps</code>.","Calculates the offset of the specified field from the …","Returns a reference to the pointer converter.","Intrusive red-black tree.","Releases ownership of a link that was previously acquired …","Intrusive singly-linked list.","","","","","","","","","","","","","Intrusive xor doubly-linked list which uses less memory …","","","A cursor which provides read-only access to a <code>LinkedList</code>.","A cursor which provides mutable access to a <code>LinkedList</code>.","An iterator which consumes a <code>LinkedList</code>.","An iterator over references to the items of a <code>LinkedList</code>.","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>LinkedList</code>.","An intrusive doubly-linked list.","Link operations for <code>LinkedList</code>.","","Returns a read-only cursor pointing to the current element.","Returns a <code>Cursor</code> pointing to the last element of the list. …","Returns a <code>CursorMut</code> pointing to the last element of the …","","","","","","","","","","","","","","","Removes all elements from the <code>LinkedList</code>.","","","","","","","","","Clones and returns the pointer that points to the element …","Returns a null <code>Cursor</code> for this list.","Creates a <code>Cursor</code> from a pointer to an element.","Returns a null <code>CursorMut</code> for this list.","Creates a <code>CursorMut</code> from a pointer to an element.","","","","","Empties the <code>LinkedList</code> without unlinking or freeing …","","","Forcibly unlinks an object from a <code>LinkedList</code>.","","","","","","","","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>LinkedList</code> after the …","Inserts a new element into the <code>LinkedList</code> before the …","","","","","","","","","","","Returns <code>true</code> if the <code>LinkedList</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>LinkedList</code>.","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","Creates a new <code>Link</code>.","Creates an empty <code>LinkedList</code>.","Returns the “next” link pointer of <code>ptr</code>.","","","","","","","","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the previous element of the …","Returns a cursor pointing to the previous element of the …","Removes the last element of the <code>LinkedList</code>.","Removes the first element of the <code>LinkedList</code>.","Returns the “prev” link pointer of <code>ptr</code>.","","","Inserts a new element at the end of the <code>LinkedList</code>.","Inserts a new element at the start of the <code>LinkedList</code>.","","Removes the current element from the <code>LinkedList</code>.","","Removes the current element from the <code>LinkedList</code> and …","","Sets the “next” link pointer of <code>ptr</code>.","","","Sets the “prev” link pointer of <code>ptr</code>.","","Inserts the elements from the given <code>LinkedList</code> after the …","Moves all element from the given <code>LinkedList</code> before the …","Splits the list into two after the current element. This …","Splits the list into two before the current element. This …","Takes all the elements out of the <code>LinkedList</code>, leaving it …","","","","","","","","","","","","","","","","","","","","","","","","","","","The color of a red-black tree node.","A cursor which provides read-only access to a <code>RBTree</code>.","A cursor which provides mutable access to a <code>RBTree</code>.","An entry in a <code>RBTree</code>.","A cursor pointing to a slot in which an element can be …","An iterator which consumes a <code>RBTree</code>.","An iterator over references to the items of a <code>RBTree</code>.","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>RBTree</code>.","An occupied entry.","An intrusive red-black tree.","Link operations for <code>RBTree</code>.","","A vacant entry.","","Returns a read-only cursor pointing to the current element.","Returns a <code>Cursor</code> pointing to the last element of the tree. …","Returns a <code>CursorMut</code> pointing to the last element of the …","","","","","","","","","","","","","","","","","","","","","Removes all elements from the <code>RBTree</code>.","","","","","","","","","","","Clones and returns the pointer that points to the element …","Returns the color of <code>ptr</code>.","","Returns a null <code>Cursor</code> for this tree.","Creates a <code>Cursor</code> from a pointer to an element.","Returns a null <code>CursorMut</code> for this tree.","Creates a <code>CursorMut</code> from a pointer to an element.","","","","","Returns an <code>Entry</code> for the given key which contains a …","","Empties the <code>RBTree</code> without unlinking or freeing objects in …","Returns a <code>Cursor</code> pointing to an element with the given …","Returns a <code>CursorMut</code> pointing to an element with the given …","","","","Forcibly unlinks an object from a <code>RBTree</code>.","","","","","","","","","","","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>RBTree</code>.","Inserts a new element into the <code>RBTree</code>.","Inserts a new element into the <code>RBTree</code> at the location …","Inserts a new element into the <code>RBTree</code> after the current …","Inserts a new element into the <code>RBTree</code> before the current …","","","","","","","","","","","","","","Returns <code>true</code> if the <code>RBTree</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>RBTree</code>.","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>RBTree</code>.","Returns the left child of <code>ptr</code>.","","Returns a <code>Cursor</code> pointing to the lowest element whose key …","Returns a <code>CursorMut</code> pointing to the first element whose …","Moves the cursor to the next element of the <code>RBTree</code>.","Moves the cursor to the next element of the <code>RBTree</code>.","Moves the cursor to the previous element of the <code>RBTree</code>.","Moves the cursor to the previous element of the <code>RBTree</code>.","Creates a new <code>Link</code>.","Creates an empty <code>RBTree</code>.","","","","","","","","Inserts an element into the <code>RBTree</code> if the entry is vacant, …","Calls the given function and inserts the result into the …","Returns the parent of <code>ptr</code>.","","Returns a cursor pointing to the next element of the <code>RBTree</code>…","Returns a cursor pointing to the next element of the <code>RBTree</code>…","Returns a cursor pointing to the previous element of the …","Returns a cursor pointing to the previous element of the …","","","Constructs a double-ended iterator over a sub-range of …","","Removes the current element from the <code>RBTree</code>.","","Removes the current element from the <code>RBTree</code> and inserts …","Returns the right child of <code>ptr</code>.","","","Sets the color of <code>ptr</code>.","","Sets the left child of <code>ptr</code>.","","","","Sets the parent of <code>ptr</code>.","","","Sets the right child of <code>ptr</code>.","","Takes all the elements out of the <code>RBTree</code>, leaving it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Cursor</code> pointing to the last element whose key is …","Returns a <code>CursorMut</code> pointing to the last element whose key …","","","A cursor which provides read-only access to a …","A cursor which provides mutable access to a …","An iterator which consumes a <code>SinglyLinkedList</code>.","An iterator over references to the items of a …","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>SinglyLinkedList</code>.","An intrusive singly-linked list.","Link operations for <code>SinglyLinkedList</code>.","","Returns a read-only cursor pointing to the current element.","","","","","","","","","","","","","","","Removes all elements from the <code>SinglyLinkedList</code>.","","","","","","","","","Clones and returns the pointer that points to the element …","Returns a null <code>Cursor</code> for this list.","Creates a <code>Cursor</code> from a pointer to an element.","Returns a null <code>CursorMut</code> for this list.","Creates a <code>CursorMut</code> from a pointer to an element.","","","","","Empties the <code>SinglyLinkedList</code> without unlinking or freeing …","","","Forcibly unlinks an object from a <code>SinglyLinkedList</code>.","","","","","","","","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>SinglyLinkedList</code> after the …","","","","","","","","","","","Returns <code>true</code> if the <code>SinglyLinkedList</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>SinglyLinkedList</code>.","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>SinglyLinkedList</code>.","Moves the cursor to the next element of the …","Moves the cursor to the next element of the …","Creates a new <code>Link</code>.","Creates an empty <code>SinglyLinkedList</code>.","Returns the “next” link pointer of <code>ptr</code>.","","","","","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the next element of the …","Removes the first element of the <code>SinglyLinkedList</code>.","","Inserts a new element at the start of the <code>SinglyLinkedList</code>.","","Removes the next element from the <code>SinglyLinkedList</code>.","","Removes the next element from the <code>SinglyLinkedList</code> and …","","Sets the “next” link pointer of <code>ptr</code>.","","Inserts the elements from the given <code>SinglyLinkedList</code> after …","Splits the list into two after the current element. This …","Takes all the elements out of the <code>SinglyLinkedList</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","A cursor which provides read-only access to a <code>XorLinkedList</code>…","A cursor which provides mutable access to a <code>XorLinkedList</code>.","An iterator which consumes a <code>XorLinkedList</code>.","An iterator over references to the items of a <code>XorLinkedList</code>…","Intrusive link that allows an object to be inserted into a …","Default <code>LinkOps</code> implementation for <code>XorLinkedList</code>.","Intrusive xor doubly-linked list which uses less memory …","Link operations for <code>XorLinkedList</code>.","","Returns a read-only cursor pointing to the current element.","Returns a <code>Cursor</code> pointing to the last element of the list. …","Returns a <code>CursorMut</code> pointing to the last element of the …","","","","","","","","","","","","","","","Removes all elements from the <code>XorLinkedList</code>.","","","","","","","","","Clones and returns the pointer that points to the element …","Returns a null <code>Cursor</code> for this list.","Creates a <code>Cursor</code> from a pointer to an element and a …","Creates a <code>Cursor</code> from a pointer to an element and a …","Returns a null <code>CursorMut</code> for this list.","Creates a <code>CursorMut</code> from a pointer to an element and a …","Creates a <code>CursorMut</code> from a pointer to an element and a …","","","","","Empties the <code>XorLinkedList</code> without unlinking or freeing …","","","Forcibly unlinks an object from a <code>XorLinkedList</code>.","","","","","","","","Returns a <code>Cursor</code> pointing to the first element of the …","Returns a <code>CursorMut</code> pointing to the first element of the …","Returns a reference to the object that the cursor is …","Returns a reference to the object that the cursor is …","Inserts a new element into the <code>XorLinkedList</code> after the …","Inserts a new element into the <code>XorLinkedList</code> before the …","","","","","","","","","","","Returns <code>true</code> if the <code>XorLinkedList</code> is empty.","Checks whether the <code>Link</code> is linked into a <code>XorLinkedList</code>.","Checks if the cursor is currently pointing to the null …","Checks if the cursor is currently pointing to the null …","Gets an iterator over the objects in the <code>XorLinkedList</code>.","Moves the cursor to the next element of the <code>XorLinkedList</code>.","Moves the cursor to the next element of the <code>XorLinkedList</code>.","Moves the cursor to the previous element of the …","Moves the cursor to the previous element of the …","Creates a new <code>Link</code>.","Creates an empty <code>XorLinkedList</code>.","Returns the “next” link pointer of <code>ptr</code>.","","","","","","","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the next element of the …","Returns a cursor pointing to the previous element of the …","Returns a cursor pointing to the previous element of the …","Removes the last element of the <code>XorLinkedList</code>.","Removes the first element of the <code>XorLinkedList</code>.","Returns the “prev” link pointer of <code>ptr</code>.","","Inserts a new element at the end of the <code>XorLinkedList</code>.","Inserts a new element at the start of the <code>XorLinkedList</code>.","","Removes the current element from the <code>XorLinkedList</code>.","Replaces the “next” or “prev” link pointer of <code>ptr</code>.","","Removes the current element from the <code>XorLinkedList</code> and …","Reverses the list in-place.","Assigns the “prev” and “next” link pointers of <code>ptr</code>.","","","Inserts the elements from the given <code>XorLinkedList</code> after …","Moves all element from the given <code>XorLinkedList</code> before the …","Splits the list into two after the current element. This …","Splits the list into two before the current element. This …","Takes all the elements out of the <code>XorLinkedList</code>, leaving …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,2,0,0,3,4,5,5,5,6,0,3,1,0,6,4,7,7,7,8,1,7,8,1,7,8,1,7,8,1,0,8,7,1,7,1,7,8,1,7,6,7,8,8,8,8,8,8,8,8,8,8,2,3,3,1,7,8,1,7,6,7,8,8,8,8,8,8,8,8,8,8,0,3,3,0,1,8,0,3,0,4,0,7,8,1,7,8,1,7,8,1,7,8,1,0,9,10,0,0,0,0,0,0,0,0,11,12,13,13,14,15,12,13,16,17,11,14,15,12,13,16,17,11,13,14,15,16,11,14,15,16,11,15,13,13,13,13,14,13,11,13,13,14,13,14,14,15,12,13,16,17,11,13,13,15,12,12,12,14,15,12,13,16,17,11,13,16,17,13,14,15,12,13,15,12,15,12,14,13,18,16,17,11,11,11,16,17,15,12,15,12,13,13,18,11,11,13,13,11,12,11,12,11,18,11,11,18,11,12,12,12,12,13,14,15,16,11,14,15,12,13,16,17,11,14,15,12,13,16,17,11,14,15,12,13,16,17,11,19,0,0,0,0,0,0,0,0,0,20,0,0,19,20,21,22,23,23,24,25,22,23,26,20,27,28,19,21,24,25,22,23,26,20,27,28,19,21,23,24,25,27,19,21,24,25,27,19,21,25,29,21,23,23,23,23,24,23,21,23,23,19,23,23,23,24,23,19,24,24,25,22,23,26,20,27,28,19,21,23,23,25,22,22,23,26,22,22,24,25,22,23,26,20,27,28,19,21,23,27,28,23,24,25,22,23,29,21,23,23,25,22,25,22,24,23,27,28,21,21,21,27,28,20,20,29,21,25,22,25,22,21,21,23,21,22,21,22,29,21,21,29,21,29,21,21,21,29,21,21,29,21,23,24,25,27,19,21,24,25,22,23,26,20,27,28,19,21,24,25,22,23,26,20,27,28,19,21,24,25,22,23,26,20,27,28,19,21,23,23,30,31,0,0,0,0,0,0,0,0,32,33,34,35,33,36,37,38,32,34,35,33,36,37,38,32,36,34,35,37,32,34,35,37,32,35,36,36,36,36,34,36,32,36,36,34,36,34,34,35,33,36,37,38,32,36,36,35,33,33,34,35,33,36,37,38,32,36,37,38,36,34,35,33,36,35,33,34,36,39,37,38,32,32,35,33,36,32,36,32,33,32,33,32,39,32,33,33,36,34,35,37,32,34,35,33,36,37,38,32,34,35,33,36,37,38,32,34,35,33,36,37,38,32,0,0,0,0,0,0,0,0,40,41,42,42,43,44,41,42,45,46,40,43,44,41,42,45,46,40,42,43,44,45,40,43,44,45,40,44,42,42,42,42,42,42,43,42,40,42,42,43,42,43,43,44,41,42,45,46,40,42,42,44,41,41,41,43,44,41,42,45,46,40,42,45,46,42,43,44,41,42,44,41,44,41,43,42,47,45,46,40,40,45,46,44,41,44,41,42,42,47,40,42,42,40,41,47,40,41,42,47,40,40,41,41,41,41,42,43,44,45,40,43,44,41,42,45,46,40,43,44,41,42,45,46,40,43,44,41,42,45,46,40],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unsaferef",3]],[[]],[[],["bound",4]],[[]],[[]],[[]],null,[[]],[[]],[[["bound",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["box",3]],["unsaferef",3]],[[]],[[],["unsaferef",3]],[[],["rc",3]],[[],["pin",3]],[[],["pin",3,[["unsaferef",3]]]],[[],["arc",3]],[[],["unsaferef",3]],[[]],[[],["pin",3,[["box",3]]]],[[],["box",3]],[[],["pin",3,[["rc",3]]]],[[],["pin",3,[["arc",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["box",3]],[[]],[[]],[[["pin",3,[["rc",3]]]]],[[]],[[["pin",3,[["box",3]]]]],[[["box",3]]],[[["pin",3]]],[[["arc",3]]],[[["rc",3]]],[[["unsaferef",3]]],[[["pin",3,[["arc",3]]]]],[[["pin",3,[["unsaferef",3]]]]],null,[[]],[[]],null,[[["bound",4]],["bool",15]],[[],["defaultpointerops",3]],null,[[]],null,[[]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursormut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["link",3]],[[],["cursor",3]],[[],["iter",3]],[[],["linkops",3]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursormut",3]],[[],["cursormut",3]],[[],["link",3]],[[],["linkedlist",3]],[[],["linkops",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cursor",3]],[[],["cursormut",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[]],[[]],[[]],[[]],[[],["link",3]],[[],["linkedlist",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["option",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursor",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["option",4]],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[["option",4],["option",4]]],[[],["result",4]],[[["option",4],["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["linkedlist",3]]],[[["linkedlist",3]]],[[],["linkedlist",3]],[[],["linkedlist",3]],[[],["linkedlist",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursormut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["link",3]],[[],["cursor",3]],[[],["iter",3]],[[],["color",4]],[[],["linkops",3]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["color",4]],[[],["color",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursormut",3]],[[],["cursormut",3]],[[],["link",3]],[[],["rbtree",3]],[[],["linkops",3]],[[]],[[],["entry",4]],[[["color",4]],["bool",15]],[[]],[[],["cursor",3]],[[],["cursormut",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cursor",3]],[[],["cursormut",3]],[[],["option",4]],[[],["option",4]],[[]],[[],["cursormut",3]],[[],["cursormut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[["bound",4]],["cursor",3]],[[["bound",4]],["cursormut",3]],[[]],[[]],[[]],[[]],[[],["link",3]],[[],["rbtree",3]],[[],["option",4]],[[],["option",4]],[[["option",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["cursormut",3]],[[],["cursormut",3]],[[],["option",4]],[[],["option",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursor",3]],[[],["option",4]],[[["option",4]],["option",4]],[[["bound",4],["bound",4]],["iter",3]],[[]],[[],["option",4]],[[["option",4],["option",4]]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[["option",4],["option",4]]],[[["color",4]]],[[["color",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[["option",4]]],[[],["rbtree",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bound",4]],["cursor",3]],[[["bound",4]],["cursormut",3]],null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["cursor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["link",3]],[[],["cursor",3]],[[],["iter",3]],[[],["linkops",3]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursormut",3]],[[],["cursormut",3]],[[],["link",3]],[[],["singlylinkedlist",3]],[[],["linkops",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cursor",3]],[[],["cursormut",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[]],[[]],[[],["link",3]],[[],["singlylinkedlist",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["option",4]],["option",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["option",4]],[[["option",4]],["option",4]],[[]],[[]],[[],["option",4]],[[["option",4],["option",4]]],[[],["result",4]],[[["option",4],["option",4]]],[[["option",4]]],[[["option",4]]],[[["singlylinkedlist",3]]],[[],["singlylinkedlist",3]],[[],["singlylinkedlist",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursormut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["link",3]],[[],["cursor",3]],[[],["iter",3]],[[],["linkops",3]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursormut",3]],[[],["cursormut",3]],[[],["cursormut",3]],[[],["link",3]],[[],["xorlinkedlist",3]],[[],["linkops",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cursor",3]],[[],["cursormut",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[]],[[]],[[]],[[]],[[],["link",3]],[[],["xorlinkedlist",3]],[[["option",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[["option",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursor",3]],[[],["cursor",3]],[[],["option",4]],[[],["option",4]],[[["option",4]],["option",4]],[[["option",4]],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[["option",4],["option",4]]],[[["option",4],["option",4]]],[[],["result",4]],[[]],[[["option",4],["option",4]]],[[["option",4],["option",4]]],[[["option",4]]],[[["xorlinkedlist",3]]],[[["xorlinkedlist",3]]],[[],["xorlinkedlist",3]],[[],["xorlinkedlist",3]],[[],["xorlinkedlist",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Bound"],[8,"KeyAdapter"],[8,"Adapter"],[8,"LinkOps"],[8,"DefaultLinkOps"],[8,"PointerOps"],[3,"UnsafeRef"],[3,"DefaultPointerOps"],[13,"Included"],[13,"Excluded"],[3,"LinkOps"],[3,"CursorMut"],[3,"LinkedList"],[3,"Link"],[3,"Cursor"],[3,"Iter"],[3,"IntoIter"],[8,"LinkedListOps"],[4,"Color"],[4,"Entry"],[3,"LinkOps"],[3,"CursorMut"],[3,"RBTree"],[3,"Link"],[3,"Cursor"],[3,"InsertCursor"],[3,"Iter"],[3,"IntoIter"],[8,"RBTreeOps"],[13,"Occupied"],[13,"Vacant"],[3,"LinkOps"],[3,"CursorMut"],[3,"Link"],[3,"Cursor"],[3,"SinglyLinkedList"],[3,"Iter"],[3,"IntoIter"],[8,"SinglyLinkedListOps"],[3,"LinkOps"],[3,"CursorMut"],[3,"XorLinkedList"],[3,"Link"],[3,"Cursor"],[3,"Iter"],[3,"IntoIter"],[8,"XorLinkedListOps"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,11,11],"n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":["itoa","","","","","","","","","","","",""],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","","","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,[[]],[[]],[[]],[[],["buffer",3]],[[["integer",8]],["str",15]],[[]],[[]],[[],["buffer",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Buffer"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[]],null],"p":[]},\
"linked_list_allocator":{"doc":"","t":[3,5,5,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Heap","align_down","align_up","allocate_first_fit","borrow","borrow_mut","bottom","deallocate","empty","extend","free","from","from_slice","hole","init","init_from_slice","into","new","size","top","try_from","try_into","type_id","used","HoleList","align_layout","allocate_first_fit","borrow","borrow_mut","deallocate","empty","from","into","min_size","new","try_from","try_into","type_id"],"q":["linked_list_allocator","","","","","","","","","","","","","","","","","","","","","","","","linked_list_allocator::hole","","","","","","","","","","","","",""],"d":["A fixed size heap backed by a linked list of free memory …","Align downwards. Returns the greatest x with alignment …","Align upwards. Returns the smallest x with alignment <code>align</code> …","Allocates a chunk of the given size with the given …","","","Returns the bottom address of the heap.","Frees the given allocation. <code>ptr</code> must be a pointer returned …","","Extends the size of the heap by creating a new hole at the …","Returns the size of the free part of the heap","","Creates a new heap from a slice of raw memory.","","Initializes an empty heap","Initialize an empty heap with provided memory.","","Creates a new heap with the given <code>bottom</code> and <code>size</code>. The …","Returns the size of the heap.","Return the top address of the heap","","","","Returns the size of the used part of the heap","A sorted list of holes. It uses the the holes itself to …","Aligns the given layout for use with <code>HoleList</code>.","Searches the list for a big enough hole.","","","Frees the allocation given by <code>ptr</code> and <code>layout</code>.","Creates an empty <code>HoleList</code>.","","","Returns the minimal allocation size. Smaller allocations …","Creates a <code>HoleList</code> that contains the given hole.","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[["layout",3]],["result",4,[["nonnull",3,[["u8",15]]]]]],[[]],[[]],[[],["usize",15]],[[["nonnull",3,[["u8",15]]],["layout",3]]],[[],["heap",3]],[[["usize",15]]],[[],["usize",15]],[[]],[[],["heap",3]],null,[[["usize",15],["usize",15]]],[[]],[[]],[[["usize",15],["usize",15]],["heap",3]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],null,[[["layout",3]],["layout",3]],[[["layout",3]],["result",4]],[[]],[[]],[[["nonnull",3,[["u8",15]]],["layout",3]],["layout",3]],[[],["holelist",3]],[[]],[[]],[[],["usize",15]],[[["usize",15],["usize",15]],["holelist",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Heap"],[3,"HoleList"]]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":[16,16,8,16,16,3,3,18,18,18,18,18,18,18,16,16,3,3,3,3,3,3,8,8,8,3,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,10,10,10,10,10,10,10,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawReentrantMutex","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","const_new","const_new","const_new","data_ptr","data_ptr","data_ptr","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_owned_by_current_thread","is_owned_by_current_thread","lock","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","write"],"q":["lock_apid":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a lock …","Marker type which indicates that the Guard type for a lock …","Initial value for an unlocked mutex.","Initial value for an unlocked mutex.","Initial value.","Initial value.","Initial value for an unlocked mutex.","Initial value for an unlocked <code>RwLock</code>.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","A raw mutex type that wraps another raw mutex to provide …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","Creates a new mutex based on a pre-existing raw mutex.","Creates a new reentrant mutex based on a pre-existing raw …","Creates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared lock …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable read …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock procotol.","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","","","","","","","","","","","","","","","","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks whether this <code>RwLock</code> is currently locked in any way.","Checks whether the mutex is currently held by the current …","Checks whether the mutex is currently held by the current …","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires this mutex, blocking if it’s held by another …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","Unlocks this mutex.","Unlocks this mutex. The inner mutex may not be unlocked if …","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol. The inner …","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into a …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[1,2,0,3,4,0,0,3,3,5,5,6,4,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,21,21,10,6,13,16,17,18,22,22,22,22,23,23,9,12,15,9,12,15,9,12,15,10,11,13,14,16,17,18,19,20,10,11,17,20,24,17,18,25,17,25,10,11,13,14,16,17,18,19,20,9,10,10,11,11,12,13,13,14,14,15,16,16,17,17,18,18,19,19,20,20,9,12,9,12,15,15,15,15,7,8,9,9,9,10,11,6,12,12,12,13,14,15,15,15,16,17,18,19,20,9,12,15,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,9,12,15,3,3,9,6,12,4,4,15,6,12,3,9,6,12,4,4,26,27,10,11,13,14,16,17,19,20,10,9,12,15,5,9,12,15,15,15,13,16,17,18,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,3,9,6,12,4,2,2,1,9,6,12,4,2,26,28,28,2,1,9,6,12,27,29,29,10,11,13,14,16,17,19,20,15,15,15,15,15,15,15,15,15,27,18,29,18,29,18,15,15,15,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,3,6,4,22,21,10,11,6,13,14,16,17,18,19,20,4,22,27,23,10,13,16,17,18,10,13,16,17,18,15,27,18,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[]],[[]],[[]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[]],[[],["rwlockupgradablereadguard",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["never",15]]],[[],["mutex",3]],[[]],[[]],[[]],[[["never",15]]],[[],["reentrantmutex",3]],[[]],[[]],[[]],[[]],[[],["rwlock",3]],[[["never",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["mutexguard",3]],[[]],[[],["reentrantmutexguard",3]],[[]],[[]],[[]],[[]],[[],["mappedmutexguard",3,[["sized",8]]]],[[],["mappedmutexguard",3,[["sized",8]]]],[[],["mappedreentrantmutexguard",3,[["sized",8]]]],[[],["mappedreentrantmutexguard",3,[["sized",8]]]],[[],["mappedrwlockreadguard",3,[["sized",8]]]],[[],["mappedrwlockwriteguard",3,[["sized",8]]]],[[],["mappedrwlockreadguard",3,[["sized",8]]]],[[],["mappedrwlockwriteguard",3,[["sized",8]]]],[[],["mutex",3]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[],["nonzerousize",3]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[],["rwlock",3]],[[],["rwlock",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["option",4,[["mutexguard",3]]]],[[],["bool",15]],[[],["option",4,[["reentrantmutexguard",3]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4,[["mutexguard",3]]]],[[],["bool",15]],[[],["option",4,[["reentrantmutexguard",3]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4,[["mutexguard",3]]]],[[],["bool",15]],[[],["option",4,[["reentrantmutexguard",3]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",4,[["mappedmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedreentrantmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedreentrantmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockreadguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockwriteguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockreadguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockwriteguard",3,[["sized",8]]]]]],[[],["option",4,[["rwlockreadguard",3]]]],[[],["option",4,[["rwlockreadguard",3]]]],[[],["option",4,[["rwlockreadguard",3]]]],[[],["option",4,[["rwlockreadguard",3]]]],[[],["option",4,[["rwlockreadguard",3]]]],[[],["option",4,[["rwlockreadguard",3]]]],[[],["option",4,[["rwlockupgradablereadguard",3]]]],[[],["option",4,[["rwlockupgradablereadguard",3]]]],[[],["option",4,[["rwlockupgradablereadguard",3]]]],[[],["bool",15]],[[],["result",4,[["rwlockwriteguard",3]]]],[[],["bool",15]],[[],["result",4,[["rwlockwriteguard",3]]]],[[],["bool",15]],[[],["result",4,[["rwlockwriteguard",3]]]],[[],["option",4,[["rwlockwriteguard",3]]]],[[],["option",4,[["rwlockwriteguard",3]]]],[[],["option",4,[["rwlockwriteguard",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockupgradablereadguard",3]],[[]],[[],["rwlockwriteguard",3]],[[],["rwlockwriteguard",3]]],"p":[[8,"RawMutexTimed"],[8,"RawRwLockTimed"],[8,"RawMutex"],[8,"RawRwLock"],[8,"GetThreadId"],[3,"RawReentrantMutex"],[3,"GuardSend"],[3,"GuardNoSend"],[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutexFair"],[8,"RawRwLockFair"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockRecursive"],[8,"RawRwLockUpgrade"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgradeTimed"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the info level.","","","","","","","","","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","","","","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[1,2,1,2,1,2,0,0,0,0,0,2,0,0,0,0,0,1,2,1,2,3,4,1,2,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,4,6,3,5,1,2,3,5,1,2,5,6,0,9,1,1,2,2,5,6,8,0,3,4,3,4,9,1,1,2,2,3,4,5,6,7,7,8,8,1,2,3,4,5,6,7,8,1,2,1,1,2,2,1,1,2,2,1,2,5,6,0,1,2,3,4,5,6,7,8,1,1,2,2,3,4,5,6,3,4,9,0,0,0,1,1,2,2,1,2,0,3,4,3,4,3,4,5,6,8,4,6,1,1,2,2,5,6,0,0,0,3,4,5,6,2,1,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["arguments",3]],[[["arguments",3]],["recordbuilder",3]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["record",3]],[[],["metadata",3]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[],["level",4]],[[],["levelfilter",4]],[[],["record",3]],[[],["metadata",3]],[[["level",4]],["ordering",4]],[[["levelfilter",4]],["ordering",4]],[[["metadata",3]],["ordering",4]],[[["metadatabuilder",3]],["ordering",4]],null,[[["metadata",3]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],null,[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4,[["level",4]]]],[[["str",15]],["result",4,[["levelfilter",4]]]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[],["level",4]],[[["level",4]],["recordbuilder",3]],[[],["level",4]],[[["level",4]],["metadatabuilder",3]],[[],["option",4,[["u32",15]]]],[[["option",4,[["u32",15]]]],["recordbuilder",3]],[[["record",3]]],null,null,[[],["log",8]],[[["levelfilter",4]],["bool",15]],[[["level",4]],["bool",15]],[[["level",4]],["bool",15]],[[["levelfilter",4]],["bool",15]],[[],["level",4]],[[],["levelfilter",4]],[[],["levelfilter",4]],[[],["metadata",3]],[[["metadata",3]],["recordbuilder",3]],[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[],["option",4,[["str",15]]]],[[["option",4,[["str",15]]]],["recordbuilder",3]],[[["metadata",3]],["bool",15]],[[["metadatabuilder",3]],["bool",15]],[[["parselevelerror",3]],["bool",15]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["levelfilter",4]],["option",4,[["ordering",4]]]],[[["level",4]],["option",4,[["ordering",4]]]],[[["level",4]],["option",4,[["ordering",4]]]],[[["levelfilter",4]],["option",4,[["ordering",4]]]],[[["metadata",3]],["option",4,[["ordering",4]]]],[[["metadatabuilder",3]],["option",4,[["ordering",4]]]],[[["log",8]],["result",4,[["setloggererror",3]]]],[[["log",8]],["result",4,[["setloggererror",3]]]],[[["levelfilter",4]]],[[],["str",15]],[[["str",15]],["recordbuilder",3]],[[],["str",15]],[[["str",15]],["metadatabuilder",3]],[[],["option",4,[["level",4]]]],[[],["levelfilter",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"],[8,"Log"]]},\
"lru":{"doc":"An implementation of a LRU cache. The cache supports <code>get</code>, …","t":[6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DefaultHasher","Iter","IterMut","LruCache","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cap","clear","clone","clone_into","contains","count","count","drop","fmt","from","from","from","get","get_mut","into","into","into","into_iter","into_iter","is_empty","iter","iter_mut","len","new","next","next","next_back","next_back","peek","peek_lru","peek_mut","pop","pop_lru","put","resize","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unbounded","unbounded_with_hasher","with_hasher"],"q":["lru","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An iterator over the entries of a <code>LruCache</code>.","An iterator over mutables entries of a <code>LruCache</code>.","An LRU Cache","","","","","","","Returns the maximum number of key-value pairs the cache …","Clears the contents of the cache.","","","Returns a bool indicating whether the given key is in the …","","","","","","","","Returns a reference to the value of the key in the cache …","Returns a mutable reference to the value of the key in the …","","","","","","Returns a bool indicating whether the cache is empty or …","An iterator visiting all entries in most-recently used …","An iterator visiting all entries in most-recently-used …","Returns the number of key-value pairs that are currently …","Creates a new LRU Cache that holds at most <code>cap</code> items.","","","","","Returns a reference to the value corresponding to the key …","Returns the value corresponding to the least recently used …","Returns a mutable reference to the value corresponding to …","Removes and returns the value corresponding to the key …","Removes and returns the key and value corresponding to the …","Puts a key-value pair into cache. If the key already …","Resizes the cache. If the new capacity is smaller than the …","","","","","","","","","","","","","Creates a new LRU Cache that never automatically evicts …","Creates a new LRU Cache that never automatically evicts …","Creates a new LRU Cache that holds at most <code>cap</code> items and …"],"i":[0,0,0,0,1,2,3,1,2,3,1,1,2,2,1,2,3,1,1,1,2,3,1,1,1,2,3,2,3,1,1,1,1,1,2,3,2,3,1,1,1,1,1,1,1,2,3,2,1,2,3,1,2,3,1,2,3,1,1,1],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["iter",3]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[["usize",15]],["lrucache",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["lrucache",3]],[[],["lrucache",3]],[[["usize",15]],["lrucache",3]]],"p":[[3,"LruCache"],[3,"Iter"],[3,"IterMut"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":[14,14,14],"n":["offset_of","raw_field","span_of"],"q":["memoffset","",""],"d":["Calculates the offset of the specified field from the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"once_cell":{"doc":"Overview","t":[0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["race","unsync","OnceBool","OnceBox","OnceNonZeroUsize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","drop","fmt","fmt","fmt","from","from","from","get","get","get","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","new","new","new","set","set","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","from","from","from","from","get","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id"],"q":["once_cell","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","Gets the underlying value.","Gets the underlying value.","Gets a reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","","","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","","","","","Gets a reference to the underlying value.","Gets a mutable reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a referce to the final cell …","","","",""],"i":[0,0,0,0,0,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,4,5,4,5,4,4,4,5,5,5,4,4,5,5,4,4,4,5,4,4,4,4,4,5,4,5,4,5,4,4,4,4,5,4,4,5,4,5],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["oncenonzerousize",3]],[[],["oncebool",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["option",4,[["nonzerousize",3]]]],[[],["option",4,[["bool",15]]]],[[],["option",4]],[[],["nonzerousize",3]],[[],["bool",15]],[[]],[[],["result",4,[["nonzerousize",3]]]],[[],["result",4,[["bool",15]]]],[[],["result",4]],[[]],[[]],[[]],[[],["oncenonzerousize",3]],[[],["oncebool",3]],[[],["oncebox",3]],[[["nonzerousize",3]],["result",4]],[[["bool",15]],["result",4]],[[["box",3]],["result",4,[["box",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["oncecell",3]],[[]],[[]],[[],["lazy",3]],[[]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["lazy",3]]],[[["never",15]]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["result",4]],[[]],[[]],[[],["option",4]],[[["lazy",3]],["result",4]],[[],["oncecell",3]],[[],["lazy",3]],[[],["result",4]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"OnceBox"],[3,"OnceCell"],[3,"Lazy"]]},\
"raw_cpuid":{"doc":"A library to parse the x86 CPUID instruction, written in …","t":[13,3,4,13,13,13,13,13,17,13,3,3,4,3,3,4,13,3,3,13,3,3,4,13,13,3,13,13,13,3,3,3,4,4,3,3,3,3,3,3,13,13,13,13,4,3,13,13,13,13,13,3,3,3,3,3,3,3,3,13,13,13,13,13,3,13,13,3,3,3,3,3,13,13,13,3,3,13,13,13,3,4,3,3,3,3,3,13,3,4,3,13,13,13,13,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,5],"n":["ACRN","ApmInfo","Associativity","Avx","Avx512Opmask","Avx512ZmmHi16","Avx512ZmmHi256","Bhyve","CACHE_INFO_TABLE","Cache","CacheInfo","CacheInfoIter","CacheInfoType","CacheParameter","CacheParametersIter","CacheType","Core","CpuId","CpuIdResult","DTLB","DatInfo","DatIter","DatType","Data","DataTLB","DirectCacheAccessInfo","DirectMapped","Disabled","Epc","EpcSection","ExtendedFeatures","ExtendedProcessorFeatureIdentifiers","ExtendedRegisterStateLocation","ExtendedRegisterType","ExtendedState","ExtendedStateInfo","ExtendedStateIter","ExtendedTopologyIter","ExtendedTopologyLevel","FeatureInfo","FullyAssociative","General","Hdc","HyperV","Hypervisor","HypervisorInfo","Ia32Xss","Instruction","InstructionTLB","Invalid","KVM","L1CacheTlbInfo","L2And3CacheTlbInfo","L2CatInfo","L3CatInfo","L3MonitoringInfo","MemBwAllocationInfo","MemoryEncryptionInfo","MonitorMwaitInfo","MpxBndcsr","MpxBndregs","NWay","Null","Null","PerformanceMonitoringInfo","Pkru","Prefetch","ProcessorBrandString","ProcessorCapacityAndFeatureInfo","ProcessorFrequencyInfo","ProcessorSerial","ProcessorTraceInfo","Pt","QEMU","QNX","RdtAllocationInfo","RdtMonitoringInfo","Reserved","SMT","STLB","SgxInfo","SgxSectionInfo","SgxSectionIter","SoCVendorAttributesIter","SoCVendorBrand","SoCVendorInfo","SvmFeatures","TLB","ThermalPowerInfo","TopologyType","TscInfo","Unified","UnifiedTLB","Unknown","Unknown","Unknown","Unknown","VMware","VendorInfo","Xcr0","Xen","all_zero","apic_frequency","apic_id_size","as_str","as_str","as_str","as_string","as_string","associativity","base_family_id","base_model_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brand_id","brand_index","bus_frequency","c_bit_position","cache_level","cache_type","cache_type","capacity_mask_length","capacity_mask_length","cflush_cache_line_size","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","coherency_line_size","configurable_address_ranges","conversion_factor","counter_bit_width","cpu_pwr_sample_time_ratio","cpuid","dcache_associativity","dcache_line_size","dcache_lines_per_tag","dcache_size","default","denominator","desc","dtlb_2m_4m_associativity","dtlb_2m_4m_associativity","dtlb_2m_4m_size","dtlb_2m_4m_size","dtlb_4k_associativity","dtlb_4k_associativity","dtlb_4k_size","dtlb_4k_size","dts_irq_threshold","eax","ebx","ebx_length","ecx","edx","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extended_family_id","extended_model_id","extended_signature","extensions_supported","family_id","fixed_function_counters","fixed_function_counters_bit_width","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_advanced_power_mgmt_info","get_cache_info","get_cache_parameters","get_dca_cap_value","get_deterministic_address_translation_info","get_direct_cache_access_info","get_extended_feature_info","get_extended_processor_and_feature_identifiers","get_extended_state_info","get_extended_topology_info","get_feature_info","get_hypervisor_info","get_l1_cache_and_tlb_info","get_l2_l3_cache_and_tlb_info","get_memory_encryption_info","get_monitor_mwait_info","get_performance_monitoring_info","get_processor_brand_string","get_processor_capacity_feature_info","get_processor_frequency_info","get_processor_serial","get_processor_trace_info","get_project_id","get_rdt_allocation_info","get_rdt_monitoring_info","get_sgx_info","get_soc_vendor_id","get_soc_vendor_info","get_stepping_id","get_svm_info","get_thermal_power_info","get_tsc_info","get_vendor_attributes","get_vendor_brand","get_vendor_info","guest_physical_address_bits","has_100mhz_steps","has_1gb_entries","has_1gib_pages","has_2mb_entries","has_3dnow","has_4k_entries","has_4mb_entries","has_64bit_mode","has_64bit_mode","has_acpi","has_addr_mask_extension","has_adx","has_aesni","has_alt_mov_cr8","has_alternate_injection","has_amd_3dnow_extensions","has_any_thread_deprecation","has_apic","has_arat","has_avic","has_avx","has_avx2","has_avx512_ifma","has_avx512bw","has_avx512cd","has_avx512dq","has_avx512er","has_avx512f","has_avx512pf","has_avx512vl","has_bmi1","has_bmi2","has_cl_zero","has_clflush","has_clflushopt","has_clwb","has_cmov","has_cmp_legacy","has_cmpxchg16b","has_cmpxchg8b","has_cnxtid","has_code_data_prioritization","has_complex_indexing","has_configurable_psb_and_cycle_accurate_mode","has_cpb","has_cpl","has_data_access_bkpt_extension","has_dca","has_de","has_debug_swap","has_decode_assists","has_ds","has_ds_area","has_dts","has_ecmd","has_eist","has_encls_leaves_etrackc_erdinfo_eldbc_elduc","has_enclv_leaves_einvirtchild_edecvirtchild_esetcontext","has_energy_bias_pref","has_execute_disable","has_ext_apic_space","has_f16c","has_fast_fxsave_fxstor","has_fdp","has_feedback_iface","has_flexible_hwp","has_flush_by_asid","has_fma","has_fma4","has_fpu","has_fpu_cs_ds_deprecated","has_freq_id_ctrl","has_fsgsbase","has_fxsave_fxstor","has_gif","has_gmet","has_hdc","has_hle","has_host_mce_override","has_htt","has_hw_coord_feedback","has_hw_enforced_cache_coh","has_hw_pstate","has_hwa","has_hwp","has_hwp_activity_window","has_hwp_capabilities","has_hwp_energy_performance_preference","has_hwp_fast_access_mode","has_hwp_notification","has_hwp_package_level_request","has_hwp_peci_override","has_hypervisor","has_ibs","has_ignore_idle_processor_hwp_request","has_inst_ret_cntr_msr","has_int_wbinvd","has_invariant_tsc","has_invlpgb","has_invlpgb_nested","has_invpcid","has_ip_tracestop_filtering","has_l2_cat","has_l3_cat","has_l3_monitoring","has_lahf_sahf","has_lbr_virtualization","has_linear_response_delay","has_lip_with_cs_base","has_local_bandwidth_monitoring","has_lwp","has_lzcnt","has_mca","has_mca_overflow_recovery","has_mce","has_mcommit","has_memory_bandwidth_allocation","has_misaligned_sse_mode","has_mmx","has_mmx_extensions","has_monitor_mwait","has_monitorx_mwaitx","has_movbe","has_mpx","has_msr","has_mtc_timing_packet_coefi_suppression","has_mtrr","has_nb_perf_cntr_extensions","has_nested_paging","has_nrip","has_occupancy_monitoring","has_ospke","has_osvw","has_oxsave","has_pae","has_page_flush_msr","has_pat","has_pause_filter","has_pause_filter_threshold","has_pbe","has_pcid","has_pclmulqdq","has_pdcm","has_perf_cntr_extensions","has_perf_cntr_llc_extensions","has_perf_tsc","has_pge","has_pku","has_pln","has_popcnt","has_power_event_trace","has_power_reporting_iface","has_prefetchw","has_prefetchwt1","has_prevent_host_ibs","has_processor_trace","has_pse","has_pse36","has_psn","has_ptm","has_ptwrite","has_rdpid","has_rdpru","has_rdrand","has_rdseed","has_rdta","has_rdtm","has_rdtscp","has_rep_movsb_stosb","has_restore_fp_error_ptrs","has_restricted_injection","has_ro_effective_freq_iface","has_rtit_cr3_match","has_rtm","has_sev","has_sev_es","has_sev_snp","has_sgx","has_sgx1","has_sgx2","has_sgx_lc","has_sha","has_single_range_output_scheme","has_skinit","has_smap","has_sme","has_smep","has_smx","has_spec_ctrl","has_ss","has_sse","has_sse2","has_sse3","has_sse41","has_sse42","has_sse4a","has_sss_check","has_ssse3","has_succor","has_svm","has_svm_lock","has_syscall_sysret","has_sysenter_sysexit","has_tbm","has_thermtrip","has_tlb_ctrl","has_tm","has_tm","has_tm2","has_topa","has_topa_maximum_entries","has_topology_extensions","has_total_bandwidth_monitoring","has_trace_transport_subsystem","has_ts","has_tsc","has_tsc_adjust_msr","has_tsc_deadline","has_tsc_rate_msr","has_turbo_boost","has_turbo_boost3","has_umip","has_unsupported_efer_lmsle","has_vmcb_clean_bits","has_vme","has_vmpl","has_vmsave_virtualization","has_vmx","has_volt_id_ctrl","has_vte","has_wbnoinvd","has_wdt","has_x2apic","has_xgetbv","has_xop","has_xsave","has_xsavec","has_xsaveopt","has_xsaves_xrstors","highest_cos","highest_cos","highest_cos","ia32_xss_supports_hdc","ia32_xss_supports_pt","icache_associativity","icache_line_size","icache_lines_per_tag","icache_size","identify","initial_local_apic_id","interrupts_as_break_event","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invlpgb_max_pages","is_branch_inst_ret_ev_unavailable","is_branch_midpred_ev_unavailable","is_cache_ref_ev_unavailable","is_compacted_format","is_core_cyc_ev_unavailable","is_fully_associative","is_fully_associative","is_in_ia32_xss","is_in_xcr0","is_inclusive","is_inst_ret_ev_unavailable","is_ll_cache_miss_ev_unavailable","is_ref_cycle_ev_unavailable","is_self_initializing","is_write_back_invalidate","isolation_bitmap","isolation_bitmap","iter","iter","itlb_2m_4m_associativity","itlb_2m_4m_associativity","itlb_2m_4m_size","itlb_2m_4m_size","itlb_4k_associativity","itlb_4k_associativity","itlb_4k_size","itlb_4k_size","l2_cat","l2cache_associativity","l2cache_line_size","l2cache_lines_per_tag","l2cache_size","l3_cat","l3_monitoring","l3cache_associativity","l3cache_line_size","l3cache_lines_per_tag","l3cache_size","largest_monitor_line","level","level_number","level_type","linear_address_bits","location","mawau_value","max_addressable_ids","max_cores_for_cache","max_cores_for_package","max_enclave_size_64bit","max_enclave_size_non_64bit","max_encrypted_guests","max_hba_throttling","max_logical_processor_ids","max_rdpru_id","maximum_logical_processors","maximum_rmid_range","memory_bandwidth_allocation","min_sev_no_es_asid","miscselect","model_id","native_cpuid","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","next","next","next","next","next","next","next","nominal_frequency","num","num_phys_threads","number_of_counters","numerator","offset","partitioning","perf_tsc_size","physical_address_bits","physical_address_reduction","physical_base","physical_line_partitions","pkg_type","processor_base_frequency","processor_max_frequency","processors","register","revision","rmid_range","secs_attributes","serial","serial_all","serial_lower","serial_middle","serial_upper","sets","sets","shift_right_for_next_apic_id","size","size","smallest_monitor_line","stepping_id","subleaf","supported_asids","supported_c0_states","supported_c1_states","supported_c2_states","supported_c3_states","supported_c4_states","supported_c5_states","supported_c6_states","supported_c7_states","supported_cycle_threshold_value_encodings","supported_mtc_period_encodings","supported_psb_frequency_encodings","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tsc_frequency","tsc_frequency","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version_id","ways","with_cpuid_fn","x2apic_id","xcr0_supports_avx512_opmask","xcr0_supports_avx512_zmm_hi16","xcr0_supports_avx512_zmm_hi256","xcr0_supports_avx_256","xcr0_supports_legacy_x87","xcr0_supports_mpx_bndcsr","xcr0_supports_mpx_bndregs","xcr0_supports_pkru","xcr0_supports_sse_128","xsave_area_size_enabled_features","xsave_area_size_supported_features","xsave_size","0","0","0","1","2","0","cpuid_count"],"q":["raw_cpuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","raw_cpuid::Associativity","raw_cpuid::ExtendedRegisterType","raw_cpuid::Hypervisor","","","raw_cpuid::SgxSectionInfo","raw_cpuid::native_cpuid"],"d":["","Processor Power Management and RAS Capabilities …","Info about cache Associativity.","","","","","","This table is taken from Intel manual (Section CPUID …","","Describes any kind of cache (TLB, Data and Instruction …","Iterates over cache information (LEAF=0x02).","What type of cache are we dealing with?","Information about an individual cache in the hierarchy.","Iterator over caches (LEAF=0x04).","Info about a what a given cache caches (instructions, …","","The main type used to query information about the CPU we’…","Low-level data-structure to store result of cpuid …","","Deterministic Address Translation Structure","Deterministic Address Translation Structure Iterator …","Deterministic Address Translation cache type (EDX bits 04 …","Data cache","","Direct cache access info (LEAF=0x09).","","","","EBX:EAX and EDX:ECX provide information on the Enclave …","Structured Extended Feature Identifiers (LEAF=0x07).","Extended Processor and Processor Feature Identifiers …","Where the extended register state is stored.","What kidn of extended register state this is.","ExtendedState subleaf structure for things that need to be …","Information for saving/restoring extended register state …","Yields ExtendedState structs.","Information about topology (LEAF=0x0B).","Gives information about the current level in the topology.","Processor and Processor Feature Identifiers (LEAF=0x01).","","","","","Identifies the different Hypervisor products.","Information about Hypervisor (LEAF=0x4000_0001)","","Instruction cache","","","","L1 Cache and TLB Information (LEAF=0x8000_0005).","L2/L3 Cache and TLB Information (LEAF=0x8000_0006).","L2 Cache Allocation Technology Enumeration Sub-leaf …","L3 Cache Allocation Technology Enumeration Sub-leaf …","Information about L3 cache monitoring.","Memory Bandwidth Allocation Enumeration Sub-leaf …","Encrypted Memory Capabilities","Information about how monitor/mwait works on this CPU …","","","","Null - No more caches","Null (indicates this sub-leaf is not valid).","Info about performance monitoring – how many counters …","","","Processor name (LEAF=0x8000_0002..=0x8000_0004).","Processor Capacity Parameters and Extended Feature …","Processor Frequency Information (LEAF=0x16).","Processor Serial Number (LEAF=0x3).","Intel Processor Trace Information (LEAF=0x14).","","QEMU is the hypervisor identity when QEMU is used without …","","Quality of service enforcement information (LEAF=0x10).","Intel Resource Director Technology RDT (LEAF=0x0F).","4-31 = Reserved","Hyper-thread (Simultaneous multithreading)","","Intel SGX Capability Enumeration Leaf (LEAF=0x12).","Intel SGX EPC Enumeration Leaf","Iterator over the SGX sub-leafs (ECX &gt;= 2).","Iterator for SoC vendor attributes.","A vendor brand string as queried from the cpuid leaf.","SoC vendor specific information (LEAF=0x17).","Information about the SVM features that the processory …","","Query information about thermal and power management …","What type of core we have at this level in the topology …","Time Stamp Counter/Core Crystal Clock Information …","Data and Instruction cache","Some unified TLBs will allow a single TLB entry to satisfy …","","","","","","Vendor Info String (LEAF=0x0)","","","","(Virtual) Bus (local apic timer) frequency in kHz.","APIC ID size.","Return the processor brand string as a rust string.","Return vendor identification as human readable string.","Return the SocVendorBrand as a string.","","","Ways of associativity (Bits 31-22)","Version Information: Family","Version Information: Model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns brand ID on AMD.","Brand Index","Bus (Reference) Frequency (in MHz).","C-bit location in page table entry","Translation cache level (starts at 1)","Translation cache type field.","Cache Type","Length of the capacity bit mask.","Length of the capacity bit mask.","CLFLUSH line size (Value ∗ 8 = cache line size in bytes)","","","","","","","","","","","","System Coherency Line Size (Bits 11-00)","Number of configurable Address Ranges for filtering (Bits …","Conversion factor from reported IA32_QM_CTR value to …","Bit width of general-purpose, performance monitoring …","Specifies the ratio of the compute unit power accumulator …","Macro which queries cpuid directly.","L1 data cache associativity.","L1 data cache line size in bytes.","L1 data cache lines per tag.","L1 data cache size in KB","","An unsigned integer which is the denominator of the …","Description of the cache (from Intel Manual)","Data TLB associativity for 2-MB and 4-MB pages.","L2 Data TLB associativity for 2-MB and 4-MB pages.","Data TLB number of entries for 2-MB and 4-MB pages.","L2 Data TLB number of entries for 2-MB and 4-MB pages.","Data TLB associativity for 4K pages.","L2 Data TLB associativity for 4K pages.","Data TLB number of entries for 4K pages.","L2 Data TLB number of entries for 4K pages.","Number of Interrupt Thresholds in Digital Thermal Sensor","Return value EAX register","Return value EBX register","Length of EBX bit vector to enumerate architectural …","Return value ECX register","Return value EDX register","","","","","","","","","","","","","","","","","","","","","","","","Version Information: Extended Family","Version Information: Extended Model","Extended Processor Signature.","Enumeration of Monitor-Mwait extensions (beyond EAX and …","","Number of fixed-function performance counters (if Version …","Bit width of fixed-function performance counters (if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Advanced Power Management Information (LEAF=0x8000_0007).","Query basic information about caches (LEAF=0x02).","Retrieve more elaborate information about caches …","Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address …","Query deterministic address translation feature …","Direct cache access info (LEAF=0x09).","Find out about more features supported by this CPU …","Extended Processor and Processor Feature Identifiers …","Information for saving/restoring extended register state …","Information about topology (LEAF=0x0B).","Query a set of features that are available on this CPU …","Returns information provided by the hypervisor, if running …","L1 Instruction Cache Information (LEAF=0x8000_0005)","L2/L3 Cache and TLB Information (LEAF=0x8000_0006).","Informations about memory encryption support …","Information about how monitor/mwait works on this CPU …","Info about performance monitoring (LEAF=0x0A).","Retrieve processor brand string (LEAF=0x8000_000{2..4}).","Processor Capacity Parameters and Extended Feature …","Processor Frequency Information (LEAF=0x16).","Retrieve serial number of processor (LEAF=0x03).","Intel Processor Trace Enumeration Information (LEAF=0x14).","","Quality of service enforcement information (LEAF=0x10).","Quality of service monitoring information (LEAF=0x0F).","Information about secure enclave support (LEAF=0x12).","","Contains SoC vendor specific information (LEAF=0x17).","","This function provides information about the SVM features …","Query information about thermal and power management …","Time Stamp Counter/Core Crystal Clock Information …","","","Return information about the vendor (LEAF=0x00).","Guest Physical Address Bits","Has 100 MHz multiplier Control?","1GB page size entries supported by this structure","Is there support for 1GiB pages.","2MB page size entries supported by this structure","3DNow extensions.","4K page size entries supported by this structure","4MB page size entries supported by this structure","Check support for 64-bit mode.","SEV guest execution only allowed from a 64-bit host if set.","Thermal Monitor and Software Controlled Clock Facilities. …","Breakpoint Addressing masking extended to bit 31.","Supports ADX.","A value of 1 indicates that the processor supports the …","LOCK MOV CR0 means MOV CR8. See “MOV(CRn)” in APM3.","Alternate Injection supported if set.","3DNow AMD extensions.","AnyThread deprecation","APIC On-Chip. The processor contains an Advanced …","ARAT. APIC-Timer-always-running feature is supported if …","Support for the AMD advanced virtual interrupt controller …","A value of 1 indicates the processor supports the AVX …","AVX2","AVX512_IFMA","AVX512BW","AVX512CD","Supports AVX512DQ.","AVX512ER","Supports AVX512F.","AVX512PF","AVX512VL","BMI1","BMI2","CLZERO instruction supported if set.","CLFLUSH Instruction. CLFLUSH Instruction is supported.","Supports CLFLUSHOPT.","CLWB","Conditional Move Instructions. The conditional move …","Check support legacy cmp.","CMPXCHG16B Available. A value of 1 indicates that the …","CMPXCHG8B Instruction. The compare-and-exchange 8 bytes …","L1 Context ID. A value of 1 indicates the L1 data cache …","Is Code and Data Prioritization Technology supported?","Complex Cache Indexing (Bit 2) False: Direct mapped cache. …","If true, Indicates support of Configurable PSB and …","Has Core performance boost?","CPL Qualified Debug Store. A value of 1 indicates the …","Data access breakpoint extension.","A value of 1 indicates the processor supports the ability …","Debugging Extensions. Support for I/O breakpoints, …","Full debug state swap supported for SEV-ES guests.","Indicates support for the decode assists if set.","Debug Store. The processor supports the ability to write …","64-bit DS Area. A value of 1 indicates the processor …","Digital temperature sensor is supported if set.","ECMD. Clock modulation duty cycle extension is supported …","Enhanced Intel SpeedStep® technology. A value of 1 …","Supports ENCLS instruction leaves ETRACKC, ERDINFO, ELDBC, …","Supports ENCLV instruction leaves EINCVIRTCHILD, …","The processor supports performance-energy bias preference …","Is there support for execute disable bit.","Extended APIC space.","A value of 1 indicates that processor supports 16-bit …","FXSAVE and FXRSTOR instruction optimizations.","FDP_EXCPTN_ONLY. x87 FPU Data Pointer updated only on x87 …","Indicates support for processor feedback interface.","Flexible HWP is supported if set.","Indicates that TLB flush events, including CR3 writes and …","A value of 1 indicates the processor supports FMA …","Four-operand FMA instruction support.","Floating Point Unit On-Chip. The processor contains an x87 …","Deprecates FPU CS and FPU DS values if 1.","Frequency ID control.","FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if …","FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR …","GIF – virtualized global interrupt flag if set.","Guest Mode Execution Trap supported if set.","HDC. HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1, …","HLE","When host <code>CR4.MCE=1</code> and guest <code>CR4.MCE=0</code>, machine check …","Max APIC IDs reserved field is Valid. A value of 0 for HTT …","Hardware Coordination Feedback Capability","Hardware cache coherency across encryption domains …","Has Hardware P-state control?","Has Hardware assert supported?","HWP. HWP base registers (IA32_PM_ENABLE[bit 0], …","HWP Activity Window. IA32_HWP_REQUEST[bits 41:32] is …","HWP Capabilities. Highest Performance change is supported …","HWP Energy Performance Preference. IA32_HWP_REQUEST[bits …","Fast access mode for the IA32_HWP_REQUEST MSR is supported …","HWP Notification. IA32_HWP_INTERRUPT MSR is supported if …","HWP Package Level Request. IA32_HWP_REQUEST_PKG MSR is …","HWP PECI override is supported if set.","A value of 1 indicates the indicates the presence of a …","Instruction based sampling.","Ignoring Idle Logical Processor HWP request is supported …","Instruction Retired Counter MSR available if set.","WBINVD/WBNOINVD are interruptible if set.","Is Invariant TSC available?","INVLPGB and TLBSYNC instruction supported if set.","INVLPGB support for invalidating guest nested translations …","INVPCID. If 1, supports INVPCID instruction for system …","If true, Indicates support of IP Filtering, TraceStop …","Supports L2 Cache Allocation.","Supports L3 Cache Allocation.","Supports L3 Cache Intel RDT Monitoring.","Is LAHF/SAHF available in 64-bit mode?","Indicates support for LBR Virtualization.","Reports whether the response of the delay values is linear.","If true, Generated packets which contain IP payloads have …","Supports local bandwidth monitoring.","Lightweight profiling support","Is LZCNT available?","Machine Check Architecture. A value of 1 indicates the …","Is MCA overflow recovery available?","Machine Check Exception. Exception 18 is defined for …","MCOMMIT instruction supported if set.","Supports Memory Bandwidth Allocation.","Misaligned SSE mode. See “Misaligned Access Support …","Intel MMX Technology. The processor supports the Intel MMX …","AMD extensions to MMX instructions.","MONITOR/MWAIT. A value of 1 indicates the processor …","Support for MWAITX and MONITORX instructions.","A value of 1 indicates that the processor supports MOVBE …","MPX. Supports Intel Memory Protection Extensions if 1.","Model Specific Registers RDMSR and WRMSR Instructions. The …","If true, Indicates support of MTC timing packet and …","Memory Type Range Registers. MTRRs are supported. The …","NB performance counter extensions support.","Nested paging supported if set.","Indicates support for NRIP save on #VMEXIT if set.","Supports occupancy monitoring.","OS has set CR4.PKE to enable protection keys (and the …","Indicates OS-visible workaround support","A value of 1 indicates that the OS has enabled …","Physical Address Extension. Physical addresses greater …","The Page Flush MSR is available if set.","Page Attribute Table. Page Attribute Table is supported. …","Indicates support for the pause intercept filter if set.","Indicates support for the PAUSE filter cycle count …","Pending Break Enable. The processor supports the use of …","Process-context identifiers. A value of 1 indicates that …","PCLMULQDQ. A value of 1 indicates the processor supports …","Perfmon and Debug Capability: A value of 1 indicates the …","Processor performance counter extensions support.","Support for L3 performance counter extension.","Performance time-stamp counter.","Page Global Bit. The global bit is supported in …","Supports protection keys for user-mode pages.","PLN. Power limit notification controls are supported if …","A value of 1 indicates that the processor supports the …","Support of Power Event Trace. Writes can set IA32_RTIT_CTL…","Has Processor power reporting interface?","Is PREFETCHW available?","Has PREFETCHWT1 (Intel® Xeon Phi™ only).","Disallowing IBS use by the host supported if set.","Supports Intel Processor Trace.","Page Size Extension. Large pages of size 4 MByte are …","36-Bit Page Size Extension. 4-MByte pages addressing …","Processor Serial Number. The processor supports the 96-bit …","PTM. Package thermal management is supported if set.","Indicates support of PTWRITE. Writes can set IA32_RTIT_CTL…","RDPID and IA32_TSC_AUX are available.","RDPRU instruction supported if set.","A value of 1 indicates that processor supports RDRAND …","Supports RDSEED.","Supports Intel Resource Director Technology (RDT) …","Supports Intel Resource Director Technology (RDT) …","Check support for rdtscp instruction.","Supports Enhanced REP MOVSB/STOSB if 1.","FP Error Pointers Restored by XRSTOR if set.","Restricted Injection supported if set.","Has Read-only effective frequency interface?","If true, Indicates that IA32_RTIT_CTL.CR3Filter can be set …","RTM","Secure Encrypted Virtualization is supported if set.","SEV Encrypted State is supported if set.","SEV Secure Nested Paging supported if set.","Supports Intel® Software Guard Extensions (Intel® SGX …","Has SGX1 support.","Has SGX2 support.","Supports SGX Launch Configuration.","Supports SHA Instructions.","If true, Indicates support of Single-Range Output scheme.","SKINIT and STGI are supported.","SMAP. Supports Supervisor-Mode Access Prevention (and the …","Secure Memory Encryption is supported if set.","SMEP. Supports Supervisor-Mode Execution Prevention if 1.","Safer Mode Extensions. A value of 1 indicates that the …","SPEC_CTRL virtualization supported if set.","Self Snoop. The processor supports the management of …","SSE. The processor supports the SSE extensions.","SSE2. The processor supports the SSE2 extensions.","Streaming SIMD Extensions 3 (SSE3). A value of 1 indicates …","A value of 1 indicates that the processor supports SSE4.1.","A value of 1 indicates that the processor supports SSE4.2.","XTRQ, INSERTQ, MOVNTSS, and MOVNTSD instruction support.","SVM supervisor shadow stack restrictions if set.","A value of 1 indicates the presence of the Supplemental …","Has Software uncorrectable error containment and recovery …","Secure virtual machine supported.","Indicates support for SVM-Lock if set.","Are fast system calls available.","SYSENTER and SYSEXIT Instructions. The SYSENTER and …","Trailing bit manipulation instruction support.","Has THERMTRIP?","Support for INVLPGB/TLBSYNC hypervisor enable in VMCB and …","Thermal Monitor. The processor implements the thermal …","Hardware thermal control (HTC)?","Thermal Monitor 2. A value of 1 indicates whether the …","If true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = …","If true, ToPA tables can hold any number of output …","Topology extensions support.","Supports total bandwidth monitoring.","If true, Indicates support of output to Trace Transport …","Is Temperature Sensor available?","Time Stamp Counter. The RDTSC instruction is supported, …","IA32_TSC_ADJUST MSR is supported if 1.","A value of 1 indicates that the processors local APIC …","Indicates support for MSR TSC ratio (MSR <code>0xC000_0104</code>) if …","Intel Turbo Boost Technology Available (see description of …","Intel® Turbo Boost Max Technology 3.0 available.","Supports user-mode instruction prevention if 1.","EFER.LMSLE is unsupported if set.","Indicates support for VMCB clean bits if set.","Virtual 8086 Mode Enhancements. Virtual 8086 mode …","VM Permission Levels supported if set.","VMSAVE and VMLOAD virtualization supported if set.","Virtual Machine Extensions. A value of 1 indicates that …","Voltage ID control.","Virtual Transparent Encryption supported if set.","WBNOINVD instruction supported if set.","Watchdog timer support.","A value of 1 indicates that the processor supports x2APIC …","Supports XGETBV with ECX = 1 if set.","Extended operation support.","A value of 1 indicates that the processor supports the …","Supports XSAVEC and the compacted form of XRSTOR if set.","CPU has xsaveopt feature.","Supports XSAVES/XRSTORS and IA32_XSS if set.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Highest COS number supported for this Leaf.","Support for HDC in IA32_XSS.","Support for PT in IA32_XSS.","L1 instruction cache associativity.","L1 instruction cache line size in bytes.","L1 instruction cache lines per tag.","L1 instruction cache size in KB","Returns the identity of the <code>Hypervisor</code>.","Initial APIC ID","Supports treating interrupts as break-event for MWAIT, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum page count for INVLPGB instruction.","Branch instruction retired event not available if 1.","Branch mispredict retired event not available if 1.","Last-level cache reference event not available if 1.","Returns true when the compacted format of an XSAVE area is …","Core cycle event not available if 1.","Fully associative structure","Fully Associative cache","True if the bit n (corresponding to the sub-leaf index) is …","True if bit n is supported in XCR0.","Cache Inclusiveness (Bit 1) False: Cache is not inclusive …","Instruction retired event not available if 1.","Last-level cache misses event not available if 1.","Reference cycles event not available if 1.","Self Initializing cache level (does not need SW …","Write-Back Invalidate/Invalidate (Bit 0) False: …","Bit-granular map of isolation/contention of allocation …","Bit-granular map of isolation/contention of allocation …","Iterator over extended state enumeration levels &gt;= 2.","Iterator over SGX sub-leafs.","Instruction TLB associativity for 2-MB and 4-MB pages.","L2 Instruction TLB associativity for 2-MB and 4-MB pages.","Instruction TLB number of entries for 2-MB and 4-MB pages.","L2 Instruction TLB number of entries for 2-MB and 4-MB …","Instruction TLB associativity for 4K pages.","L2 Instruction TLB associativity for 4K pages.","Instruction TLB number of entries for 4K pages.","L2 Instruction TLB number of entries for 4K pages.","L2 Cache Allocation Information.","L2 Associativity field","L2 Cache Line size in bytes","L2 cache lines per tag.","Cache size in KB.","L3 Cache Allocation Information.","L3 Cache Monitoring.","L2 Associativity field","L2 Cache Line size in bytes","L2 cache lines per tag.","Specifies the L3 cache size range","Largest monitor-line size in bytes (default is processor’…","Cache Level (starts at 1)","Level number.","","Linear Address Bits","","The value of MAWAU used by the BNDLDX and BNDSTX …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for logical processors …","Maximum number of addressable IDs for processor cores in …","The maximum supported enclave size in 64-bit mode is …","The maximum supported enclave size in non-64-bit mode is …","Number of encrypted guests supported simultaneouslys","Reports the maximum MBA throttling value supported for the …","Maximum number of addressable IDs for logical processors …","The maximum ECX value recognized by RDPRU.","The size of the <code>apic_id_size</code> field determines the maximum …","Maximum range (zero-based) of RMID of L3.","Memory Bandwidth Allocation Information.","Minimum ASID value for an SEV enabled, SEV-ES disabled …","Bit vector of supported extended SGX features.","","Uses Rust’s <code>cpuid</code> function from the <code>arch</code> module.","","","","","","","","","","","","","","","","","","","","Return new CpuId struct.","Iterate over all cache information.","Iterate over all cache info subleafs for this CPU.","","","","Iterate over each sub-leaf with an address translation …","Iterate over all SoC vendor specific attributes.","An unsigned integer which is the nominal frequency of the …","Number as retrieved from cpuid","Number of physical threads.","Number of general-purpose performance monitoring counter …","An unsigned integer which is the numerator of the …","The offset in bytes of this extended state components save …","Partitioning (0: Soft partitioning between the logical …","Performance time-stamp counter size (in bits).","Physical Address Bits","Physical Address bit reduction","The physical address of the base of the EPC section","Physical Line partitions (Bits 21-12)","Returns package type on AMD.","Processor Base Frequency (in MHz).","Maximum Frequency (in MHz).","Number of logical processors at this level type. The …","Returns which register this specific extended subleaf …","SVM revision number.","Maximum range (zero-based) of RMID within this physical …","Reports the valid bits of SECS.ATTRIBUTES[127:0] that …","Combination of bits 00-31 and 32-63 of 96 bit processor …","96 bit processor serial number.","Bits 00-31 of 96 bit processor serial number.","Bits 32-63 of 96 bit processor serial number.","Bits 64-96 of 96 bit processor serial number.","Number of Sets.","Number of Sets (Bits 31-00)","Number of bits to shift right on x2APIC ID to get a unique …","The size in bytes (from the offset specified in EBX) of …","Size of the corresponding EPC section within the Processor …","Smallest monitor-line size in bytes (default is processor…","Version Information: Stepping ID","","Number of available address space identifiers (ASID).","Number of C0 sub C-states supported using MWAIT (Bits 03 - …","Number of C1 sub C-states supported using MWAIT (Bits 07 - …","Number of C2 sub C-states supported using MWAIT (Bits 11 - …","Number of C3 sub C-states supported using MWAIT (Bits 15 - …","Number of C4 sub C-states supported using MWAIT (Bits 19 - …","Number of C5 sub C-states supported using MWAIT (Bits 23 - …","Number of C6 sub C-states supported using MWAIT (Bits 27 - …","Number of C7 sub C-states supported using MWAIT (Bits 31 - …","Bitmap of supported Cycle Threshold value encodings (Bits …","Bitmap of supported MTC period encodings (Bit 31:16).","Bitmap of supported Configurable PSB frequency encodings …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","“TSC frequency” = “core crystal clock frequency” * …","TSC frequency in kHz.","Cache type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version ID of architectural performance monitoring. (Bits …","Ways of associativity.","Return new CpuId struct with custom reader function.","x2APIC ID the current logical processor. (Bits 31-00)","Support for AVX512 OPMASK in XCR0.","Support for AVX512 ZMM Hi16 in XCR0.","Support for AVX512 ZMM Hi256 XCR0.","Support for AVX 256-bit in XCR0.","Support for legacy x87 in XCR0.","Support for MPX BNDCSR in XCR0.","Support for MPX BNDREGS in XCR0.","Support for PKRU in XCR0.","Support for SSE 128-bit in XCR0.","Maximum size (bytes, from the beginning of the …","Maximum size (bytes, from the beginning of the …","The size in bytes of the XSAVE area containing all states …","","","","","","",""],"i":[1,0,0,2,2,2,2,1,0,3,0,0,0,0,0,0,4,0,0,3,0,0,0,5,6,0,7,7,8,0,0,0,0,0,0,0,0,0,0,0,7,3,2,1,0,0,9,5,6,4,1,0,0,0,0,0,0,0,0,2,2,7,5,6,0,2,3,0,0,0,0,0,2,1,1,0,0,5,4,3,0,0,0,0,0,0,0,3,0,0,0,5,6,7,2,6,1,1,0,9,1,10,11,12,13,14,15,14,15,16,17,17,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,37,12,38,39,40,10,14,41,3,42,43,44,16,5,45,46,47,4,48,2,9,49,50,51,8,52,53,6,54,15,1,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,37,12,38,39,40,10,14,41,3,42,43,44,16,5,45,46,47,4,48,2,9,49,50,51,8,52,53,6,54,15,1,18,17,32,38,33,33,16,28,49,17,40,10,41,3,42,44,16,46,48,51,53,16,30,26,22,37,0,35,35,35,35,40,31,42,35,36,35,36,35,36,35,36,19,10,10,22,10,10,35,36,7,37,12,38,39,10,14,41,43,16,5,45,47,4,2,9,49,50,6,15,1,17,17,18,45,17,22,22,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,7,37,12,38,39,40,10,14,14,41,3,42,42,43,44,16,5,5,45,46,47,4,4,48,2,2,9,9,49,50,51,8,52,53,6,6,54,15,15,1,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,37,12,38,39,40,10,14,41,3,42,43,44,16,5,45,46,47,4,48,2,2,9,49,50,51,8,52,53,6,54,15,1,40,40,40,21,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,34,40,40,40,34,40,34,40,40,40,34,34,40,12,37,33,18,33,18,33,33,18,38,17,18,20,17,18,38,18,22,17,19,39,17,20,20,20,20,20,20,20,20,20,20,20,12,17,20,20,17,18,17,17,17,28,16,30,37,17,18,17,17,38,39,17,17,19,19,17,29,29,19,18,18,17,18,20,37,19,39,17,18,17,20,37,20,17,39,39,19,20,39,17,19,38,37,37,19,19,19,19,19,19,19,19,17,18,19,12,12,37,12,12,20,30,27,27,25,18,39,50,30,26,18,18,17,37,17,12,27,18,17,18,17,18,17,20,17,30,17,18,39,39,26,20,18,17,17,38,17,39,39,17,17,17,17,18,18,18,17,20,19,17,30,37,18,20,38,20,17,17,17,19,30,20,12,17,20,20,20,18,20,12,38,37,30,20,38,38,38,20,29,29,20,20,30,18,20,38,20,17,39,17,17,17,17,17,17,18,39,17,37,18,39,18,17,18,37,39,17,37,17,30,30,18,26,30,37,17,20,17,39,19,19,20,12,39,17,38,39,17,37,38,12,18,17,23,18,17,23,23,23,28,49,50,23,23,35,35,35,35,11,17,45,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,37,12,38,39,40,10,14,41,3,42,43,44,16,5,45,46,47,4,48,2,9,49,50,51,8,52,53,6,54,15,1,41,44,46,48,51,53,54,12,22,22,22,24,22,33,16,24,24,16,22,22,22,16,16,28,49,23,29,35,36,35,36,35,36,35,36,27,36,36,36,36,27,25,36,36,36,36,45,16,47,47,12,24,20,33,16,16,29,29,38,50,17,12,12,26,27,38,29,17,0,35,36,7,37,12,38,39,10,14,41,43,16,45,47,2,49,50,15,1,40,41,44,46,48,51,53,54,31,42,12,22,31,24,33,12,12,38,52,16,18,32,32,47,24,39,25,29,43,43,43,43,43,33,16,47,24,52,45,17,24,39,45,45,45,45,45,45,45,45,30,30,30,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,37,12,38,39,40,10,14,41,3,42,43,44,16,5,45,46,47,4,48,2,9,49,50,51,8,52,53,6,54,15,1,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,37,12,38,39,40,10,14,41,3,42,43,44,16,5,45,46,47,4,48,2,9,49,50,51,8,52,53,6,54,15,1,31,11,42,18,13,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,11,35,36,7,37,12,38,39,40,10,14,41,3,42,43,44,16,5,45,46,47,4,48,2,9,49,50,51,8,52,53,6,54,15,1,22,33,40,47,23,23,23,23,23,23,23,23,23,23,23,23,55,56,57,57,57,58,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["option",4,[["u32",15]]]],[[],["u8",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["usize",15]],[[],["u8",15]],[[],["uu32",15]],[[],["u8",15]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],["dattype",4]],[[],["cachetype",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["cpuid",3]],[[],["cpuidresult",3]],[[],["cacheinfoiter",3]],[[],["cacheinfotype",4]],[[],["cacheinfo",3]],[[],["cacheparametersiter",3]],[[],["cacheparameter",3]],[[],["extendedtopologyiter",3]],[[],["extendedstateiter",3]],[[],["sgxsectioniter",3]],[[],["datiter",3]],[[],["usize",15]],[[],["u8",15]],[[],["u32",15]],[[],["u8",15]],[[],["u32",15]],null,[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["cpuid",3]],[[],["u32",15]],[[],["str",15]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["u8",15]],null,null,[[],["u8",15]],null,null,[[["l1cachetlbinfo",3]],["bool",15]],[[["l2and3cachetlbinfo",3]],["bool",15]],[[["associativity",4]],["bool",15]],[[["apminfo",3]],["bool",15]],[[["processorcapacityandfeatureinfo",3]],["bool",15]],[[["memoryencryptioninfo",3]],["bool",15]],[[["svmfeatures",3]],["bool",15]],[[["cpuidresult",3]],["bool",15]],[[["vendorinfo",3]],["bool",15]],[[["cacheinfoiter",3]],["bool",15]],[[["processorserial",3]],["bool",15]],[[["cacheparameter",3]],["bool",15]],[[["cachetype",4]],["bool",15]],[[["monitormwaitinfo",3]],["bool",15]],[[["extendedtopologylevel",3]],["bool",15]],[[["topologytype",4]],["bool",15]],[[["extendedregistertype",4]],["bool",15]],[[["extendedregisterstatelocation",4]],["bool",15]],[[["l2catinfo",3]],["bool",15]],[[["membwallocationinfo",3]],["bool",15]],[[["dattype",4]],["bool",15]],[[["socvendorbrand",3]],["bool",15]],[[["hypervisor",4]],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["extendedregistertype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["apminfo",3]]]],[[],["option",4,[["cacheinfoiter",3]]]],[[],["option",4,[["cacheparametersiter",3]]]],[[],["u32",15]],[[],["option",4,[["datiter",3]]]],[[],["option",4,[["directcacheaccessinfo",3]]]],[[],["option",4,[["extendedfeatures",3]]]],[[],["option",4,[["extendedprocessorfeatureidentifiers",3]]]],[[],["option",4,[["extendedstateinfo",3]]]],[[],["option",4,[["extendedtopologyiter",3]]]],[[],["option",4,[["featureinfo",3]]]],[[],["option",4,[["hypervisorinfo",3]]]],[[],["option",4,[["l1cachetlbinfo",3]]]],[[],["option",4,[["l2and3cachetlbinfo",3]]]],[[],["option",4,[["memoryencryptioninfo",3]]]],[[],["option",4,[["monitormwaitinfo",3]]]],[[],["option",4,[["performancemonitoringinfo",3]]]],[[],["option",4,[["processorbrandstring",3]]]],[[],["option",4,[["processorcapacityandfeatureinfo",3]]]],[[],["option",4,[["processorfrequencyinfo",3]]]],[[],["option",4,[["processorserial",3]]]],[[],["option",4,[["processortraceinfo",3]]]],[[],["u32",15]],[[],["option",4,[["rdtallocationinfo",3]]]],[[],["option",4,[["rdtmonitoringinfo",3]]]],[[],["option",4,[["sgxinfo",3]]]],[[],["u16",15]],[[],["option",4,[["socvendorinfo",3]]]],[[],["u32",15]],[[],["option",4,[["svmfeatures",3]]]],[[],["option",4,[["thermalpowerinfo",3]]]],[[],["option",4,[["tscinfo",3]]]],[[],["option",4,[["socvendorattributesiter",3]]]],[[],["option",4,[["socvendorbrand",3]]]],[[],["option",4,[["vendorinfo",3]]]],[[],["u8",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["bool",15]],[[],["bool",15]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["hypervisor",4]],[[],["u8",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["extendedstateiter",3]],[[],["sgxsectioniter",3]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["associativity",4]],[[],["associativity",4]],[[],["u8",15]],[[],["u16",15]],[[],["option",4,[["l2catinfo",3]]]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u16",15]],[[],["option",4,[["l3catinfo",3]]]],[[],["option",4,[["l3monitoringinfo",3]]]],[[],["associativity",4]],[[],["u8",15]],[[],["u8",15]],[[],["u16",15]],[[],["u16",15]],[[],["u8",15]],[[],["u8",15]],[[],["topologytype",4]],[[],["u8",15]],[[],["extendedregisterstatelocation",4]],[[],["u8",15]],[[],["u16",15]],[[],["usize",15]],[[],["usize",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u16",15]],[[],["u8",15]],[[],["u16",15]],[[],["usize",15]],[[],["u32",15]],[[],["option",4,[["membwallocationinfo",3]]]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],null,[[["l1cachetlbinfo",3]],["bool",15]],[[["l2and3cachetlbinfo",3]],["bool",15]],[[["associativity",4]],["bool",15]],[[["apminfo",3]],["bool",15]],[[["processorcapacityandfeatureinfo",3]],["bool",15]],[[["memoryencryptioninfo",3]],["bool",15]],[[["svmfeatures",3]],["bool",15]],[[["cpuidresult",3]],["bool",15]],[[["vendorinfo",3]],["bool",15]],[[["cacheinfoiter",3]],["bool",15]],[[["processorserial",3]],["bool",15]],[[["cacheparameter",3]],["bool",15]],[[["monitormwaitinfo",3]],["bool",15]],[[["extendedtopologylevel",3]],["bool",15]],[[["extendedregistertype",4]],["bool",15]],[[["l2catinfo",3]],["bool",15]],[[["membwallocationinfo",3]],["bool",15]],[[["socvendorbrand",3]],["bool",15]],[[["hypervisor",4]],["bool",15]],[[]],[[],["option",4,[["cacheinfo",3]]]],[[],["option",4,[["cacheparameter",3]]]],[[],["option",4,[["extendedtopologylevel",3]]]],[[],["option",4,[["extendedstate",3]]]],[[],["option",4,[["sgxsectioninfo",4]]]],[[],["option",4,[["datinfo",3]]]],[[],["option",4,[["cpuidresult",3]]]],[[],["u32",15]],null,[[],["usize",15]],[[],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[],["u8",15]],[[],["usize",15]],[[],["u8",15]],[[],["u8",15]],[[],["u64",15]],[[],["usize",15]],[[],["u32",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["extendedregistertype",4]],[[],["u8",15]],[[],["u32",15]],[[]],[[],["u64",15]],[[],["u128",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u16",15]],[[],["u8",15]],null,[[],["u32",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["u64",15]]]],[[],["option",4,[["u32",15]]]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u8",15]],[[],["u16",15]],[[]],[[],["u32",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],null,null,null,null,null,null,[[["u32",15],["u32",15]],["cpuidresult",3]]],"p":[[4,"Hypervisor"],[4,"ExtendedRegisterType"],[4,"CacheInfoType"],[4,"TopologyType"],[4,"CacheType"],[4,"DatType"],[4,"Associativity"],[4,"SgxSectionInfo"],[4,"ExtendedRegisterStateLocation"],[3,"CpuIdResult"],[3,"HypervisorInfo"],[3,"ProcessorCapacityAndFeatureInfo"],[3,"ProcessorBrandString"],[3,"VendorInfo"],[3,"SoCVendorBrand"],[3,"CacheParameter"],[3,"FeatureInfo"],[3,"ExtendedProcessorFeatureIdentifiers"],[3,"ThermalPowerInfo"],[3,"ExtendedFeatures"],[3,"DirectCacheAccessInfo"],[3,"PerformanceMonitoringInfo"],[3,"ExtendedStateInfo"],[3,"ExtendedState"],[3,"RdtMonitoringInfo"],[3,"L3MonitoringInfo"],[3,"RdtAllocationInfo"],[3,"L3CatInfo"],[3,"SgxInfo"],[3,"ProcessorTraceInfo"],[3,"TscInfo"],[3,"ProcessorFrequencyInfo"],[3,"DatInfo"],[3,"SoCVendorInfo"],[3,"L1CacheTlbInfo"],[3,"L2And3CacheTlbInfo"],[3,"ApmInfo"],[3,"MemoryEncryptionInfo"],[3,"SvmFeatures"],[3,"CpuId"],[3,"CacheInfoIter"],[3,"CacheInfo"],[3,"ProcessorSerial"],[3,"CacheParametersIter"],[3,"MonitorMwaitInfo"],[3,"ExtendedTopologyIter"],[3,"ExtendedTopologyLevel"],[3,"ExtendedStateIter"],[3,"L2CatInfo"],[3,"MemBwAllocationInfo"],[3,"SgxSectionIter"],[3,"EpcSection"],[3,"DatIter"],[3,"SoCVendorAttributesIter"],[13,"NWay"],[13,"Unknown"],[13,"Unknown"],[13,"Epc"]]},\
"rustc_demangle":{"doc":"Demangle Rust compiler symbol names.","t":[3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["Demangle","TryDemangleError","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","demangle","fmt","fmt","fmt","from","from","into","into","try_demangle","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rustc_demangle","","","","","","","","","","","","","","","","","","","","","",""],"d":["Representation of a demangled symbol name.","Error returned from the <code>try_demangle</code> function below when …","Returns the underlying string that’s being demangled.","","","","","","De-mangles a Rust symbol into a more readable version","","","","","","","","The same as <code>demangle</code>, except return an <code>Err</code> if the string …","","","","","",""],"i":[0,0,1,1,2,1,2,2,0,1,1,2,1,2,1,2,0,1,2,1,2,1,2],"f":[null,null,[[],["str",15]],[[]],[[]],[[]],[[]],[[],["trydemangleerror",3]],[[["str",15]],["demangle",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4,[["demangle",3],["trydemangleerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Demangle"],[3,"TryDemangleError"]]},\
"ryu":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,0,11,11,11,5,5],"n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":["ryu","","","","","","","","","","","","","","","ryu::raw",""],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","","","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[null,null,[[]],[[]],[[]],[[]],[[["float",8]],["str",15]],[[["float",8]],["str",15]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["f32",15]],["usize",15]],[[["f64",15]],["usize",15]]],"p":[[3,"Buffer"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":[4,3,8,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","","","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","","","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,2,1,2,0,1,1,1,1,2,1,2,0,1,2,1,3,2,1,2,1,2,1,2,1],"f":[null,null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["scopeguard",3,[["always",4]]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["scopeguard",3]]],"p":[[3,"ScopeGuard"],[4,"Always"],[8,"Strategy"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","ne","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","0","0","0","0","0","0","0","0","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::Unexpected","","","","","","","","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","","","","","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","","","","","","","","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new borrowed deserializer from the given string.","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","","","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,1,2,2,0,2,2,2,2,2,2,2,0,2,2,2,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,0,0,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,0,0,0,0,6,5,0,0,1,7,8,9,10,0,5,0,0,5,0,5,5,5,5,5,0,5,5,5,5,0,5,5,5,11,12,9,0,0,13,5,13,5,13,5,13,5,14,13,3,11,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,5,12,13,15,15,13,13,5,5,13,5,13,5,6,14,14,14,1,14,5,10,10,7,7,8,8,8,8,8,8,7,8,10,13,5,5,13,5,13,5,10,13,5,10,14,14,0,9,9,12,13,12,12,12,12,13,12,12,13,12,12,13,12,13,12,12,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,12,13,12,12,12,13,12,12,13,16,17,18,19,20,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,33,33,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,32,49,33,24,25,26,27,28,29,30,31,32,33,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,33,27,30,31,32,49,50,51,32,49,32,32,32,32,32,49,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,33,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,25,26,27,28,29,51,0,2,52,53,54,55,56,57,58,0,2,52,53,54,55,56,57,58,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,59,59,2,2,2,60,52,53,54,55,56,57,58,59,59,59,59,59,59,59,59,59,2,4,2,2,2,52,53,59,59,56,2,2,54,55,57,58,59,59,59,59,2,2,2,2,2,56,59,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,56,59,57,58,59,59,59],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],null,[[],["bool",15]],[[],["bool",15]],null,null,[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[["option",4,[["usize",15]]]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15],["str",15]],["result",4]],[[],["result",4]],[[["option",4,[["usize",15]]]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15],["str",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["unexpected",4]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["ignoredany",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[],["bool",15]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[["str",15]]],[[["str",15]]],null,[[],["result",4]],[[],["result",4]],[[["bool",15]],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["vec",3,[["u8",15]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["string",3]],["result",4]],[[["u128",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[],["mapaccessdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["bool",15]],[[["str",15]],["borrowedstrdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4,[["option",4]]]],[[],["result",4]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["bool",15]],[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["option",4,[["usize",15]]]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15],["str",15]],["result",4]],[[],["result",4]],[[["option",4,[["usize",15]]]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15],["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[4,"Unexpected"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[13,"Bool"],[13,"Unsigned"],[13,"Signed"],[13,"Float"],[13,"Char"],[13,"Str"],[13,"Bytes"],[13,"Other"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Impossible"],[8,"Error"]]},\
"serde_json":{"doc":"Serde JSON","t":[13,13,3,3,3,13,3,13,13,6,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,14,0,11,11,11,11,11,11,5,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,3,8,3,3,3,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,3,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,3,3,3,3,13,3,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,8,13,3,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12,12,12,12,12],"n":["Array","Bool","Deserializer","Error","Map","Null","Number","Number","Object","Result","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into_deserializer","into_iter","into_iter","invalid_type","json","map","ne","next","serialize","serialize","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","0","0","0","0","0","Deserializer","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow_mut","borrow_mut","byte_offset","end","from","from","from_slice","from_slice","from_str","from_str","into","into","into_iter","new","new","new","new","try_from","try_from","try_into","try_into","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","0","0","Array","Bool","Index","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","ne","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0"],"q":["serde_jsonserde_json::Value","","","","","serde_json::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::error","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map::Entry","","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::value::Value","","","",""],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","","Display a JSON value as a string.","","","","","","","","","","","Convert <code>Number</code> to <code>Value</code>","","Convert copy-on-write string to <code>Value</code>","","Convert map (with string keys) to <code>Value</code>","Convert a <code>Vec</code> to <code>Value</code>","Convert <code>()</code> to <code>Value</code>","Convert a slice to <code>Value</code>","","","","Convert 32-bit floating point number to <code>Value</code>","Convert string slice to <code>Value</code>","Convert 64-bit floating point number to <code>Value</code>","Convert boolean to <code>Value</code>","Convert <code>String</code> to <code>Value</code>","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","","","","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","","","","","","A structure that deserializes JSON into Rust values.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","","","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","","","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","","","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into Self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","","","","","","","","","","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","","","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","","","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","","","","","","",""],"i":[1,1,0,0,0,1,0,1,1,0,0,1,0,2,3,4,5,1,2,3,4,5,1,5,1,5,1,4,4,0,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,5,4,4,5,1,1,2,3,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,0,0,1,0,5,1,5,1,2,3,4,5,1,1,3,5,4,0,0,1,3,5,1,5,1,0,4,1,0,0,0,0,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,0,6,7,8,9,10,0,0,0,0,0,11,12,11,12,3,2,11,12,0,2,0,2,11,12,2,2,3,11,12,11,12,11,12,11,12,0,13,13,0,13,0,13,13,13,4,13,13,4,13,13,13,13,4,4,4,4,4,13,13,13,13,0,0,0,0,0,0,14,0,14,0,0,0,14,5,14,15,16,17,18,19,20,21,22,14,15,16,17,18,19,20,21,22,5,5,5,14,15,16,17,18,19,20,21,22,5,16,5,5,16,5,15,16,14,15,16,17,18,19,20,21,22,17,18,19,20,21,22,16,5,5,5,14,15,16,5,5,17,18,19,20,21,22,5,17,18,19,20,21,22,17,18,19,20,21,22,14,14,5,16,5,5,17,18,19,20,21,22,14,15,16,17,18,19,20,21,22,14,15,16,17,18,19,20,21,22,14,15,16,17,18,19,20,21,22,5,5,5,23,24,1,1,0,1,0,1,1,0,1,0,1,1,1,1,25,1,25,1,1,1,1,1,25,26,25,26,25,25,25,26,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,25,25,25,25,25,25,25,25,25,25,25,25,25,0,1,1,25,26,25,1,1,1,25,1,25,1,1,1,1,1,25,25,1,1,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,25,25,0,26,25,26,25,26,25,6,7,8,9,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["value",4]],[[]],[[]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],null,[[]],[[],["value",4]],[[],["result",4]],[[],["result",4,[["value",4]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[["usize",15]],["result",4,[["error",3]]]],[[["str",15],["usize",15]],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",15]],["result",4,[["error",3]]]],[[],["bool",15]],[[["u32",15]],["bool",15]],[[["u16",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[["i8",15]],["bool",15]],[[["i16",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i64",15]],["bool",15]],[[["isize",15]],["bool",15]],[[["u8",15]],["bool",15]],[[["value",4]],["bool",15]],null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u16",15]]],[[]],[[["i16",15]]],[[["i8",15]]],[[["i32",15]]],[[["i64",15]]],[[["number",3]]],[[["isize",15]]],[[["cow",4,[["str",15]]]]],[[["u8",15]]],[[["map",3,[["string",3],["value",4]]]]],[[["vec",3]]],[[]],[[]],[[["u32",15]]],[[["u64",15]]],[[["usize",15]]],[[["f32",15]]],[[["str",15]]],[[["f64",15]]],[[["bool",15]]],[[["string",3]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",4,[["value",4],["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unexpected",4],["expected",8]]],null,null,[[["value",4]],["bool",15]],[[],["option",4,[["result",6]]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",6,[["string",3]]]],[[],["string",3]],[[],["string",3]],[[],["result",6,[["string",3]]]],[[],["result",4,[["value",4],["error",3]]]],[[],["result",6,[["vec",3,[["u8",15]]]]]],[[],["result",6,[["vec",3,[["u8",15]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["result",6]],[[]],[[]],[[],["result",6]],[[]],[[["str",15]],["result",6]],[[["str",15]]],[[]],[[]],[[],["streamdeserializer",3]],[[]],[[]],[[]],[[["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["category",4]],[[],["category",4]],[[]],[[],["usize",15]],[[["category",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["entry",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["value",4]]]],[[],["value",4]],[[],["option",4]],[[],["option",4,[["value",4]]]],[[],["value",4]],[[["string",3],["value",4]],["option",4,[["value",4]]]],[[["value",4]],["value",4]],[[["value",4]],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["value",4]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["value",4]],["value",4]],[[],["value",4]],[[],["option",4,[["value",4]]]],[[],["value",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4,[["vec",3]]]],[[],["option",4,[["vec",3]]]],[[],["option",4,[["bool",15]]]],[[],["option",4,[["f64",15]]]],[[],["option",4,[["f64",15]]]],[[],["option",4,[["i64",15]]]],[[],["option",4,[["i64",15]]]],[[],["option",4]],[[],["option",4,[["map",3]]]],[[],["option",4,[["map",3]]]],[[],["option",4,[["str",15]]]],[[],["option",4,[["u64",15]]]],[[],["option",4,[["u64",15]]]],[[]],[[]],[[]],[[]],[[],["number",3]],[[]],[[],["result",6,[["value",4]]]],[[],["result",4,[["number",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4]],[[["str",15]],["result",4]],[[["number",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["i32",15]]],[[]],[[["u16",15]]],[[["u8",15]]],[[["isize",15]]],[[["i8",15]]],[[["usize",15]]],[[["i64",15]]],[[["i16",15]]],[[["u64",15]]],[[["u32",15]]],[[["f64",15]],["option",4,[["number",3]]]],[[["str",15]],["result",4]],[[["value",4]],["result",4,[["error",3]]]],[[["index",8]],["option",4,[["value",4]]]],[[["index",8]],["option",4,[["value",4]]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["number",3]],["bool",15]],[[["str",15]],["option",4,[["value",4]]]],[[["str",15]],["option",4,[["value",4]]]],[[],["result",4]],[[["bool",15]],["result",6,[["value",4]]]],[[],["result",6,[["value",4]]]],[[["char",15]],["result",6,[["value",4]]]],[[["f32",15]],["result",6,[["value",4]]]],[[["f64",15]],["result",6,[["value",4]]]],[[["i16",15]],["result",6,[["value",4]]]],[[["i32",15]],["result",6,[["value",4]]]],[[["i64",15]],["result",6,[["value",4]]]],[[["i8",15]],["result",6,[["value",4]]]],[[["option",4,[["usize",15]]]],["result",6]],[[["str",15]],["result",6,[["value",4]]]],[[["str",15],["u32",15],["str",15]],["result",6,[["value",4]]]],[[],["result",6,[["value",4]]]],[[["option",4,[["usize",15]]]],["result",6]],[[],["result",6,[["value",4]]]],[[["str",15]],["result",6,[["value",4]]]],[[["str",15],["usize",15]],["result",6]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["str",15],["usize",15]],["result",6]],[[["str",15],["u32",15],["str",15],["usize",15]],["result",6]],[[["u16",15]],["result",6,[["value",4]]]],[[["u32",15]],["result",6,[["value",4]]]],[[["u64",15]],["result",6,[["value",4]]]],[[["u8",15]],["result",6,[["value",4]]]],[[],["result",6,[["value",4]]]],[[["str",15]],["result",6,[["value",4]]]],[[["str",15],["u32",15],["str",15]],["result",6,[["value",4]]]],[[],["value",4]],[[]],[[],["string",3]],[[],["result",4,[["value",4],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null],"p":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[3,"Map"],[13,"Bool"],[13,"Number"],[13,"String"],[13,"Array"],[13,"Object"],[3,"SliceRead"],[3,"StrRead"],[4,"Category"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[13,"Vacant"],[13,"Occupied"],[3,"Number"],[3,"Serializer"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":[6,6,6,6,6,6,6,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Barrier","Lazy","Mutex","Once","RwLock","RwLockUpgradableGuard","RwLockWriteGuard","barrier","lazy","lock_api","mutex","once","relax","rwlock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","as_mut_ptr","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","SpinMutex","SpinMutexGuard","as_mut_ptr","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","INIT","Once","as_mut_ptr","borrow","borrow_mut","call_once","drop","fmt","from","from","from","get","get_mut","get_unchecked","initialized","into","is_completed","new","poll","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","as_mut_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","is_locked","leak","leak","leak","lock_exclusive","lock_shared","lock_upgradable","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_lock_exclusive","try_lock_shared","try_lock_upgradable","try_read","try_upgrade","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","unlock_exclusive","unlock_shared","unlock_upgradable","upgrade","upgrade","upgradeable_read","write","writer_count"],"q":["spin","","","","","","","","","","","","","","spin::barrier","","","","","","","","","","","","","","","","","","","spin::lazy","","","","","","","","","","","","","","spin::lock_api","","","","","","spin::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::mutex::spin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::once","","","","","","","","","","","","","","","","","","","","","","","","spin::relax","","","","","","","","","","","","","","","","","","","","spin::rwlock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A primitive that synchronizes the execution of multiple …","A value which is initialized on the first access. See …","A primitive that synchronizes the execution of multiple …","A primitive that provides lazy one-time initialization. …","A lock that provides data access to either one writer or …","A guard that provides immutable data access but can be …","A guard that provides mutable data access. See …","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Spin synchronisation primitives, but compatible with …","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","","","","","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","Retrieves a mutable pointer to the inner data.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","Forces the evaluation of this lazy value and returns a …","","","Creates a new lazy value with the given initializing …","","","","A lock that provides mutually exclusive data access …","A guard that provides mutable data access (compatible with …","A lock that provides data access to either one writer or …","A guard that provides immutable data access (compatible …","A guard that provides immutable data access but can be …","A guard that provides mutable data access (compatible with …","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","","","","","","","","","","","Force unlock this <code>Mutex</code>.","","","","","Returns a mutable reference to the underlying data.","","","Consumes this <code>Mutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>Mutex</code> and returns a guard that permits access to …","","Creates a new <code>Mutex</code> wrapping the supplied data.","A naïve spinning mutex.","","","","","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","","","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","Returns a mutable pointer to the underlying data.","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","Force unlock this <code>SpinMutex</code>.","","","","","Returns a mutable reference to the underlying data.","","","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>SpinMutex</code> and returns a guard that permits …","","Creates a new <code>SpinMutex</code> wrapping the supplied data.","","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","Retrieve a pointer to the inner data.","","","Performs an initialization routine once and only once. The …","","","","","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Returns a reference to the inner value on the unchecked …","Creates a new initialized <code>Once</code>.","","Checks whether the value has been initialized.","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU that …","","","","","","","","","Perform the relaxing operation during a period of …","","","","","","","","","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","Returns a mutable pointer to the underying data.","","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","","","","","","Returns a mutable reference to the underlying data.","","","","","Consumes this <code>RwLock</code>, returning the underlying data.","","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","","","","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","","","","Attempt to acquire this lock with shared read access.","","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,4,5,4,5,4,5,5,4,5,5,4,4,4,4,5,4,4,5,4,4,4,5,4,4,4,0,4,5,4,5,4,4,4,5,4,0,0,6,6,7,6,7,6,7,7,7,6,7,7,6,6,6,6,7,6,6,7,6,6,6,7,6,6,6,6,7,6,7,6,6,6,7,6,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,9,10,9,10,9,10,9,10,11,9,10,9,10,9,10,9,10,0,0,0,0,12,12,13,14,15,12,13,14,15,12,13,14,15,14,12,14,15,14,13,14,15,12,13,13,14,14,15,15,12,12,12,12,12,13,14,15,12,12,13,14,15,12,12,13,14,15,12,12,12,12,12,12,12,13,14,15,12,13,14,15,12,12,12,12,12,15,12,12,12,13,14,15,12,12,12,12,15,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["barrierwaitresult",3]],null,[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["never",15]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["mutexguard",3]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["mutexguard",3]]]],[[],["bool",15]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["never",15]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["spinmutexguard",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["option",4,[["spinmutexguard",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[["fnonce",8]]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["never",15]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[],["rwlockupgradableguard",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["never",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4,[["rwlockreadguard",3]]]],[[],["bool",15]],[[],["result",4,[["rwlockwriteguard",3]]]],[[],["option",4,[["rwlockupgradableguard",3]]]],[[],["option",4,[["rwlockwriteguard",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["rwlockwriteguard",3]],[[],["rwlockupgradableguard",3]],[[],["rwlockwriteguard",3]],[[],["usize",15]]],"p":[[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Lazy"],[3,"Mutex"],[3,"MutexGuard"],[3,"SpinMutex"],[3,"SpinMutexGuard"],[3,"Once"],[3,"Spin"],[3,"Loop"],[8,"RelaxStrategy"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"]]},\
"stivale_boot":{"doc":"","t":[0,0,13,13,13,13,18,13,18,18,13,18,18,13,3,3,3,4,3,3,3,3,13,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,12,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,18,13,13,18,13,13,18,13,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,18,13,18,18,18,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,12,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,12,11,11,12,12,11,11,11,12,11,12,12,11,11,11,11,11,11,11,12,12,11,12,12,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11],"n":["v1","v2","AcpiNvs","AcpiReclaimable","BadMemory","BootloaderReclaimable","FRAMEBUFFER_MODE","Framebuffer","HIGHER_HALF","KASLR","Kernel","LEVEL_5_PAGING","NULL","Reserved","StivaleHeader","StivaleHeaderFlags","StivaleMemoryMapEntry","StivaleMemoryMapEntryType","StivaleMemoryMapIter","StivaleModule","StivaleModuleIter","StivaleStruct","Usable","all","as_str","base","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","blue_mask_shift","blue_mask_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","cmp","command_line","complement","contains","difference","empty","end","end_address","entry_point","entry_type","entry_type","eq","eq","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framebuffer_addr","framebuffer_bpp","framebuffer_bpp","framebuffer_height","framebuffer_height","framebuffer_pitch","framebuffer_width","framebuffer_width","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","green_mask_shift","green_mask_size","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_empty","length","memory_map_array","memory_map_as_slice","memory_map_iter","memory_map_len","module_len","modules","modules_as_slice","modules_iter","ne","new","next","next","not","partial_cmp","red_mask_shift","red_mask_size","remove","rsdp_adddres","set","size","smbios_entry_32","smbios_entry_64","stack","start","string","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unix_epoch","AcpiNvs","AcpiReclaimable","BIOS","BadMemory","BootloaderReclaimable","EXECUTABLE","Framebuffer","Kernel","READABLE","Reserved","Stivale5LevelPagingHeaderTag","StivaleAnyVideoTag","StivaleCommandLineTag","StivaleDeviceTreeTag","StivaleEdidInfoTag","StivaleEfiSystemTableTag","StivaleEpochTag","StivaleFirmwareTag","StivaleFirmwareTagFlags","StivaleFramebufferHeaderTag","StivaleFramebufferTag","StivaleHeader","StivaleKernelFileTag","StivaleKernelFileV2Tag","StivaleKernelSlideTag","StivaleMemoryMapEntry","StivaleMemoryMapEntryType","StivaleMemoryMapIter","StivaleMemoryMapTag","StivaleModule","StivaleModuleIter","StivaleModuleTag","StivaleMtrrHeaderTag","StivaleMtrrTag","StivalePmr","StivalePmrPermissionFlags","StivalePmrsTag","StivalePxeInfoTag","StivaleRsdpTag","StivaleSmbiosTag","StivaleSmpHeaderTag","StivaleSmpHeaderTagFlags","StivaleSmpInfo","StivaleSmpTag","StivaleStruct","StivaleTagHeader","StivaleTerminalHeaderTag","StivaleTerminalTag","StivaleUartTag","StivaleUnmapNullHeaderTag","StivaleVMapTag","UEFI","Usable","WRITABLE","X2APIC","XAPIC","_padding","acpi_processor_uid","add_tag","address","address","address","all","all","all","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice_mut","as_str","base","base","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","blue_mask_shift","blue_mask_size","bootloader_brand","bootloader_version","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bsp_lapic_id","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cols","command_line","command_line","complement","complement","complement","contains","contains","contains","cpu_count","dev_tree","difference","difference","difference","edid_info","edid_len","efi_system_table","empty","empty","empty","end","end_address","entries_len","entry_array","entry_point","entry_type","entry_type","epoch","epoch","eq","eq","eq","eq","extend","extend","extend","extra","firmware","flags","flags","flags","flags","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framebuffer","framebuffer_addr","framebuffer_bpp","framebuffer_bpp","framebuffer_height","framebuffer_height","framebuffer_pitch","framebuffer_width","framebuffer_width","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","get_flags","get_stack","get_tag","goto_address","green_mask_shift","green_mask_size","hash","hash","hash","header","header","header","header","header","header","header","header","header","header","header","header","header","header","header","header","header","header","header","header","header","identifier","info_array","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","kernel_file","kernel_file_addr","kernel_file_v2","kernel_size","kernel_slide","kernel_slide","kernel_start","lapic_id","length","memory_map","memory_model","module_len","modules","modules_array","mtrr","ne","ne","ne","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","not","not","not","partial_cmp","partial_cmp","partial_cmp","permissions","permissions","pmr_count","pmrs","pmrs","preference","pxe_info","red_mask_shift","red_mask_size","remove","remove","remove","rows","rsdp","rsdp","server_ip","set","set","set","set_bootloader_brand","set_bootloader_version","size","size","size","size","smbios","smbios_entry_32","smbios_entry_64","smp","smp_info_array","smp_mut","stack","start","string","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","system_table_addr","tags","target_stack","term_write","term_write_addr","terminal","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uart","union","union","union","unused","vmap"],"q":["stivale_boot","","stivale_boot::vstivale_boot::vd":["This module contains the definitions for stivale boot …","This module contains the definitions for stivale2 boot …","ACPI memory that cannot be reclaimed.","ACPI memory that can be reclaimed.","Memory marked as defective (bad RAM).","Memory used by the bootloader that can be reclaimed after …","If set, the bootloader will be instructed to use graphics …","Memory containing the framebuffer.","If set, all pointers, except otherwise noted, are to be …","Formerly used to indicate whether to enable KASLR, this …","Memory containing the kernel and any modules.","If set, level 5 paging will be requested to the bootloader …","","Memory reserved by the system.","","","","The type of a memory map entry. The entries are guaranteed …","Iterator over all the memory regions provided by the …","Structure representing a module, containing the …","Iterator over all the modules that were loaded.","","Usable memory.","Returns the set containing all flags.","Returns the ASCII 0-terminated string passed to the module …","Physical address of base of the memory section.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Shift of the blue mask in RGB.","Size of the blue mask in RGB.","","","","","","","","","","","","","","","","","","","","","","","Address of the null-terminated command line.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","End address of this module.","Returns the end address of this memory region.","Sets the entry point address. If not zero, the bootloader …","Returns the entry type of this memory region. External …","The type of this memory map entry.","","","","Sets the provided stivale header flags. See the …","","","","","","","","","Address of the framebuffer if avaliable else its set to …","Sets the requested framebuffer bpp. Only parsed if a …","The framebuffer bits per pixels.","Sets the requested framebuffer height. Only parsed if a …","Height of the framebuffer in pixels.","The framebuffer pitch in bytes.","Sets the requested framebuffer width. Only parsed if a …","Width of the framebuffer in pixels.","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Shift of the green mask in RGB.","Size of the green mask in RGB.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Length of this memory section.","Pointer to the memory map array.","Return’s memory map entries pointer as a rust slice.","Returns an iterator over all the memory regions.","Length of the memory map entries.","The length of modules that the stivale bootloader loaded …","Pointer to the modules array.","Return’s the modules array pointer as a rust slice.","Returns an iterator over all the modules that were loaded.","","","","","Returns the complement of this set of flags.","","Shift of the red mask in RGB.","Size of the red mask in RGB.","Removes the specified flags in-place.","Address of the RSDP ACPI structure.","Inserts or removes the specified flags depending on the …","Returns the size of this module.","32-bit SMBIOS entry point address. Set to 0 if unavailable.","64-bit SMBIOS entry point address. Set to 0 if unavailable.","Sets the stack pointer which will be in ESP/RSP when the …","Address where this module has been loaded.","ASCII 0-terminated string passed to the module as …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","UNIX epoch at boot, which is read from system RTC.","ACPI memory that cannot be reclaimed.","ACPI memory that can be reclaimed.","The kernel was booted in a legacy BIOS mode.","Memory marked as defective (bad RAM).","Memory used by the bootloader that can be reclaimed after …","","Memory containing the framebuffer.","Memory containing the kernel and any modules.","","Memory reserved by the system.","If this tag is present the bootloader is instructed to …","This tag tells the bootloader that the kernel has no …","This tag is used to get the kernel the command line string …","This tag describes a device tree blob for the platform.","This tag is used to get the EDID information as acquired …","This tag is used to get a pointer to the EFI system table …","This tag is used to get the current UNIX epoch, as per RTC.","This tag is used to get the info about the firmware.","Bitfield representing the firmware and boot flags passed …","If this tag is present the bootloader is instructed to …","If the framebuffer tag was requested through the …","","This tag is used to get the kernel with a pointer to a …","","This tag is used to get the slide that the bootloader …","","The type of a memory map entry. The entries are guaranteed …","Iterator over all the memory regions provided by the …","","Structure representing a module, containing the …","Iterator over all the modules that were loaded.","This tag is used to get the modules that the bootloader …","This tag tells the bootloader to, in case a framebuffer …","This tag exists if MTRR write-combining for the …","","","","This tag reports that the kernel has been booted via PXE, …","This tag is used to get the location of the ACPI RSDP …","This tag is used to get the location of the SMBIOS entry …","","Bitfield representing the SMP header flags passed to the …","SMP imformation structure.","","","","If this tag is present the bootloader is instructed to set …","If the terminal tag was requested through the terminal tag …","This tag reports that there is a memory mapped UART port …","If this tag is present the bootloader is instructed to …","This tag describes the high physical memory location.","The kernel was booted in UEFI mode.","Usable memory.","","Instruct the bootloader to use X2APIC, if avaliable.","Instruct the bootloader to use XAPIC.","","ACPI Processor UID as specified by MADT.","","The address of the UART port.","The address of the device tree blob.","VMAP_HIGH, where the physical memory is mapped in the …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Return’s memory map entries pointer as a rust slice.","Return’s the EDID information pointer as a rust slice.","Return’s the modules array pointer as a rust slice.","Return’s the SMP info array pointer as a rust slice.","Return’s the PMRs array pointer as a rust slice.","Return’s the SMP info array pointer as a mutable rust …","Returns the ASCII 0-terminated string passed to the module …","","Physical address of base of the memory section.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Shift of the blue mask in RGB.","Size of the blue mask in RGB.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","LAPIC ID of the BSP (bootstrap processor).","","","","","","","","","","","The amount of columns in the stivale terminal setup by the …","","Pointer to a null-terminated cmdline.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Return’s the total number of logical CPUs (including …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Length of the EDID information array.","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","End address of this module.","Returns the end address of this memory region.","Total length of the memory map entries.","Pointer to the memory map entries.","","Returns the entry type of this memory region. External …","The type of this memory map entry.","","UNIX epoch at boot, which is read from system RTC.","","","","","","","","This field is polled by the started APs until the kernel …","","","","","","Flags telling about the firmware and boot flags passed by …","Stivale specification says that the flags in this tag are …","","","","","","","","","","","","","","","","","","","","The address of the framebuffer.","","The amount of bytes-per pixel.","","The total height of the framebuffer in pixels.","The pitch of the framebuffer in bytes.","","The total width of the framebuffer in pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","Returns the flags stored in this header.","Returns the stack pointer placed in this header.","","This field is polled by the started APs until the kernel …","Shift of the green mask in RGB.","Size of the green mask in RGB.","","","","Return’s the tag header","","","","","","","","","","","","","","","","","","","","","","Pointer to the EDID information array.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns an iterator over all the memory regions.","Returns an iterator over all the modules that were loaded.","","Address of the raw kernel file.","","Size of the raw kernel file.","","The kernel slide. See structure-level documentation for …","Address of the raw kernel file.","LAPIC ID as specified by MADT.","Length of this memory section.","","Memory model of the framebuffer. If set to one, its RGB …","Length of the modules array.","","Pointer to the modules array.","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","The permissions field contains flgas to determine the range…","Count of PMRs in following array.","","Array of PMR structs.","0: prefer linear framebuffer","","Shift of the red mask in RGB.","Size of the red mask in RGB.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","The amount of rows in the stivale terminal setup by the …","","Pointer to the ACPI RSDP structure.","Server IP in network byte order.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","Returns the size of the framebuffer.","Returns the size of this module.","The size of the device tree blob.","","","32-bit SMBIOS entry point address. Set to 0 if unavailable.","64-bit SMBIOS entry point address. Set to 0 if unavailable.","","Pointer to the SMP info array (including BSP).","","","Address where this module has been loaded.","ASCII 0-terminated string passed to the module as …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Address of the EFI system table.","","The stack that will be loaded in ESP/RSP once the …","Returns the terminal write function provided by the …","The virtual address of the <code>term_write</code> function, which is …","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Stivale specification says that this field is reserved for …",""],"i":[0,0,1,1,1,1,2,1,2,2,1,2,2,1,0,0,0,0,0,0,0,0,1,2,3,4,2,2,2,2,2,2,2,5,5,6,3,5,2,7,1,4,8,6,3,5,2,7,1,4,8,2,7,1,4,8,2,5,2,2,2,2,3,4,6,4,4,2,1,2,6,5,2,2,2,2,2,1,4,5,6,5,6,5,5,6,5,6,3,5,2,7,1,4,8,2,2,2,2,5,5,2,2,2,2,6,3,5,2,7,1,4,8,7,8,2,2,4,5,5,5,5,5,5,5,5,2,6,7,8,2,2,5,5,2,5,2,3,5,5,6,3,3,2,2,2,2,6,3,5,2,7,1,4,8,6,3,5,2,7,1,4,8,6,3,5,2,7,1,4,8,2,5,9,9,10,9,9,11,9,9,11,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,9,11,12,12,13,14,15,16,17,18,12,10,11,19,20,21,22,23,22,24,25,26,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,27,27,15,15,28,29,27,30,31,19,32,33,34,35,36,37,20,38,24,21,39,14,22,40,16,17,18,41,25,23,15,13,42,12,43,44,45,46,47,9,26,48,10,49,11,28,29,27,30,31,19,32,33,34,35,36,37,20,38,24,21,39,14,22,40,16,17,18,41,25,23,15,13,42,12,43,44,45,46,47,9,26,48,10,49,11,22,12,9,26,48,10,49,11,12,10,11,30,15,37,12,10,11,12,10,11,22,15,12,10,11,15,20,15,12,10,11,24,26,19,19,28,26,26,15,32,12,9,10,11,12,10,11,14,15,28,42,43,30,33,39,22,12,12,12,12,12,9,26,10,10,10,10,10,11,11,11,11,11,15,27,13,27,13,27,27,13,27,28,29,27,30,31,19,32,33,34,35,36,37,20,38,24,21,39,14,22,40,16,17,18,41,25,23,15,13,42,12,43,44,45,46,47,9,26,48,10,49,11,12,10,11,12,10,11,12,10,11,12,10,11,28,28,15,14,27,27,12,10,11,22,27,30,31,19,32,33,34,35,36,37,20,38,21,39,40,16,17,18,41,23,29,20,12,10,11,12,10,11,12,10,11,28,29,27,30,31,19,32,33,34,35,36,37,20,38,24,21,39,14,22,40,16,17,18,41,25,23,15,13,42,12,43,44,45,46,47,9,26,48,10,49,11,48,49,12,10,11,12,10,11,19,21,15,35,15,41,15,36,41,14,26,15,27,21,15,21,15,12,10,11,28,15,13,42,43,44,45,46,47,13,42,43,44,45,46,47,48,49,29,12,10,11,12,10,11,25,25,23,15,23,47,15,27,27,12,10,11,30,15,31,40,12,10,11,15,15,27,24,17,25,15,39,39,15,22,15,28,24,24,12,10,11,12,10,11,12,10,11,34,28,14,30,30,15,12,10,11,28,29,27,30,31,19,32,33,34,35,36,37,20,38,24,21,39,14,22,40,16,17,18,41,25,23,15,13,42,12,43,44,45,46,47,9,26,48,10,49,11,28,29,27,30,31,19,32,33,34,35,36,37,20,38,24,21,39,14,22,40,16,17,18,41,25,23,15,13,42,12,43,44,45,46,47,9,26,48,10,49,11,28,29,27,30,31,19,32,33,34,35,36,37,20,38,24,21,39,14,22,40,16,17,18,41,25,23,15,13,42,12,43,44,45,46,47,9,26,48,10,49,11,15,12,10,11,22,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["str",15]],null,[[]],[[]],[[["stivaleheaderflags",3]]],[[]],[[],["u16",15]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stivaleheaderflags",3]],[[],["stivalemoduleiter",3]],[[],["stivalememorymapentrytype",4]],[[],["stivalememorymapentry",3]],[[],["stivalememorymapiter",3]],[[["stivaleheaderflags",3]],["ordering",4]],null,[[]],[[],["bool",15]],[[]],[[]],null,[[],["u64",15]],[[]],[[],["stivalememorymapentrytype",4]],null,[[["stivaleheaderflags",3]],["bool",15]],[[["stivalememorymapentrytype",4]],["bool",15]],[[["intoiterator",8]]],[[["stivaleheaderflags",3]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[["u16",15]]],null,[[["u16",15]]],null,null,[[["u16",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15]],["option",4]],[[["u16",15]]],[[["u16",15]]],[[["intoiterator",8]]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[]],[[],["stivalememorymapiter",3]],null,null,null,[[]],[[],["stivalemoduleiter",3]],[[["stivaleheaderflags",3]],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[["stivaleheaderflags",3]],["option",4,[["ordering",4]]]],null,null,[[]],null,[[["bool",15]]],[[],["u64",15]],null,null,[[]],null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u16",15]]],null,[[["stivaletagheader",3]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["stivalesmpheadertagflags",3]]],[[["stivalefirmwaretagflags",3]]],[[["stivalepmrpermissionflags",3]]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["stivalesmpheadertagflags",3]],[[],["stivalememorymapentrytype",4]],[[],["stivalememorymapentry",3]],[[],["stivalememorymapiter",3]],[[],["stivalefirmwaretagflags",3]],[[],["stivalemoduleiter",3]],[[],["stivalepmrpermissionflags",3]],[[["stivalesmpheadertagflags",3]],["ordering",4]],[[["stivalefirmwaretagflags",3]],["ordering",4]],[[["stivalepmrpermissionflags",3]],["ordering",4]],null,[[],["option",4,[["stivalecommandlinetag",3]]]],null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u64",15]],[[],["option",4,[["stivaledevicetreetag",3]]]],[[]],[[]],[[]],[[],["option",4,[["stivaleedidinfotag",3]]]],null,[[],["option",4,[["stivaleefisystemtabletag",3]]]],[[]],[[]],[[]],null,[[],["u64",15]],null,null,[[]],[[],["stivalememorymapentrytype",4]],null,[[],["option",4,[["stivaleepochtag",3]]]],null,[[["stivalesmpheadertagflags",3]],["bool",15]],[[["stivalememorymapentrytype",4]],["bool",15]],[[["stivalefirmwaretagflags",3]],["bool",15]],[[["stivalepmrpermissionflags",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,[[],["option",4,[["stivalefirmwaretag",3]]]],[[["u64",15]]],[[["u64",15]]],[[["stivalesmpheadertagflags",3]]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["option",4,[["stivaleframebuffertag",3]]]],null,[[["u16",15]]],null,[[["u16",15]]],null,null,[[["u16",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["u64",15]],[[]],[[["u64",15]],["option",4,[["u64",15]]]],null,null,null,[[]],[[]],[[]],[[],["stivaletagheader",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["stivalememorymapiter",3]],[[],["stivalemoduleiter",3]],[[],["option",4,[["stivalekernelfiletag",3]]]],null,[[],["option",4,[["stivalekernelfilev2tag",3]]]],null,[[],["option",4,[["stivalekernelslidetag",3]]]],null,null,null,null,[[],["option",4,[["stivalememorymaptag",3]]]],null,null,[[],["option",4,[["stivalemoduletag",3]]]],null,[[],["option",4,[["stivalemtrrtag",3]]]],[[["stivalesmpheadertagflags",3]],["bool",15]],[[["stivalefirmwaretagflags",3]],["bool",15]],[[["stivalepmrpermissionflags",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],null,[[]],[[]],[[]],[[["stivalesmpheadertagflags",3]],["option",4,[["ordering",4]]]],[[["stivalefirmwaretagflags",3]],["option",4,[["ordering",4]]]],[[["stivalepmrpermissionflags",3]],["option",4,[["ordering",4]]]],[[],["stivalepmrpermissionflags",3]],null,null,[[],["option",4,[["stivalepmrstag",3]]]],null,[[["u64",15]]],[[],["option",4,[["stivalepxeinfotag",3]]]],null,null,[[]],[[]],[[]],null,[[],["option",4,[["stivalersdptag",3]]]],null,null,[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["str",15]]],[[["str",15]]],[[],["usize",15]],[[],["u64",15]],null,null,[[],["option",4,[["stivalesmbiostag",3]]]],null,null,[[],["option",4,[["stivalesmptag",3]]]],null,[[],["option",4,[["stivalesmptag",3]]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],null,[[],["option",4,[["stivaleterminaltag",3]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["option",4,[["stivaleuarttag",3]]]],[[]],[[]],[[]],null,[[],["option",4,[["stivalevmaptag",3]]]]],"p":[[4,"StivaleMemoryMapEntryType"],[3,"StivaleHeaderFlags"],[3,"StivaleModule"],[3,"StivaleMemoryMapEntry"],[3,"StivaleStruct"],[3,"StivaleHeader"],[3,"StivaleModuleIter"],[3,"StivaleMemoryMapIter"],[4,"StivaleMemoryMapEntryType"],[3,"StivaleFirmwareTagFlags"],[3,"StivalePmrPermissionFlags"],[3,"StivaleSmpHeaderTagFlags"],[3,"StivaleFramebufferHeaderTag"],[3,"StivaleSmpInfo"],[3,"StivaleStruct"],[3,"StivaleUartTag"],[3,"StivaleDeviceTreeTag"],[3,"StivaleVMapTag"],[3,"StivaleMemoryMapTag"],[3,"StivaleEdidInfoTag"],[3,"StivaleModuleTag"],[3,"StivaleSmpTag"],[3,"StivalePmrsTag"],[3,"StivaleModule"],[3,"StivalePmr"],[3,"StivaleMemoryMapEntry"],[3,"StivaleFramebufferTag"],[3,"StivaleHeader"],[3,"StivaleTagHeader"],[3,"StivaleTerminalTag"],[3,"StivaleRsdpTag"],[3,"StivaleEpochTag"],[3,"StivaleFirmwareTag"],[3,"StivaleEfiSystemTableTag"],[3,"StivaleKernelFileTag"],[3,"StivaleKernelSlideTag"],[3,"StivaleCommandLineTag"],[3,"StivaleMtrrTag"],[3,"StivaleSmbiosTag"],[3,"StivalePxeInfoTag"],[3,"StivaleKernelFileV2Tag"],[3,"StivaleTerminalHeaderTag"],[3,"StivaleSmpHeaderTag"],[3,"StivaleMtrrHeaderTag"],[3,"Stivale5LevelPagingHeaderTag"],[3,"StivaleUnmapNullHeaderTag"],[3,"StivaleAnyVideoTag"],[3,"StivaleMemoryMapIter"],[3,"StivaleModuleIter"]]},\
"utf8parse":{"doc":"A table-driven UTF-8 Parser","t":[3,8,11,11,11,10,11,11,11,10,11,11,11,11],"n":["Parser","Receiver","advance","borrow","borrow_mut","codepoint","default","from","into","invalid_sequence","new","try_from","try_into","type_id"],"q":["utf8parse","","","","","","","","","","","","",""],"d":["A parser for Utf8 Characters","Handles codepoint and invalid sequence events from the …","Advance the parser","","","Called whenever a codepoint is parsed successfully","","","","Called when an invalid_sequence is detected","Create a new Parser","","",""],"i":[0,0,1,1,1,2,1,1,1,2,1,1,1,1],"f":[null,null,[[["u8",15]]],[[]],[[]],[[["char",15]]],[[],["parser",3]],[[]],[[]],[[]],[[],["parser",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Parser"],[8,"Receiver"]]},\
"vte":{"doc":"Parser for implementing virtual terminal emulators","t":[3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Params","ParamsIter","Parser","Perform","advance","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","csi_dispatch","default","default","esc_dispatch","execute","fmt","from","from","from","hook","into","into","into","into_iter","is_empty","iter","len","new","next","osc_dispatch","print","put","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unhook"],"q":["vte","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Immutable subparameter iterator.","Parser for raw <em>VTE</em> protocol which delegates actions to a …","Performs actions requested by the Parser","Advance the parser state","","","","","","","A final character has arrived for a CSI sequence","","","The final character of an escape sequence has arrived.","Execute a C0 or C1 control function.","","","","","Invoked when a final character arrives in first part of …","","","","","Returns <code>true</code> if there are no parameters present.","Returns an iterator over all parameters and subparameters.","Returns the number of parameters.","Create a new Parser","","Dispatch an operating system command.","Draw a character to the screen and update states.","Pass bytes as part of a device control string to the …","","","","","","","","","","","Called when a device control string is terminated."],"i":[0,0,0,0,1,2,3,1,2,3,1,4,3,1,4,4,3,2,3,1,4,2,3,1,2,3,3,3,1,2,4,4,4,2,2,3,1,2,3,1,2,3,1,4],"f":[null,null,null,null,[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["params",3],["bool",15],["char",15]]],[[],["params",3]],[[],["parser",3]],[[["bool",15],["u8",15]]],[[["u8",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["params",3],["bool",15],["char",15]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["paramsiter",3]],[[],["usize",15]],[[],["parser",3]],[[],["option",4]],[[["bool",15]]],[[["char",15]]],[[["u8",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[3,"Parser"],[3,"ParamsIter"],[3,"Params"],[8,"Perform"]]},\
"xmas_elf":{"doc":"","t":[3,8,6,6,11,11,0,11,11,11,11,10,11,10,11,11,11,0,0,12,12,11,11,0,11,11,11,11,0,0,11,11,11,13,13,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,5,11,11,11,11,11,12,13,13,13,13,13,4,3,13,13,4,3,13,13,3,13,13,3,4,3,13,13,13,13,13,17,4,3,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,3,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,5,11,12,11,12,11,12,12,12,5,11,12,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,17,17,17,17,17,3,13,13,13,13,13,13,13,13,13,13,13,4,3,3,3,4,13,17,17,17,17,17,13,4,3,13,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,12,5,11,12,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,17,17,17,17,3,3,4,3,13,13,13,13,13,13,13,13,13,13,17,17,17,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,4,3,3,3,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,3,13,13,3,3,8,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,12,12],"n":["ElfFile","Extensions","P32","P64","borrow","borrow_mut","dynamic","find_section_by_name","fmt","from","get_dyn_string","get_gnu_buildid","get_gnu_buildid","get_gnu_debuglink","get_gnu_debuglink","get_shstr","get_string","hash","header","header","input","into","new","program","program_header","program_iter","section_header","section_iter","sections","symbol_table","try_from","try_into","type_id","BindNow","Debug","Dynamic","FLAG_1_CONFALT","FLAG_1_DIRECT","FLAG_1_DISPRELDNE","FLAG_1_DISPRELPND","FLAG_1_EDITED","FLAG_1_ENDFILTEE","FLAG_1_GLOBAL","FLAG_1_GLOBAUDIT","FLAG_1_GROUP","FLAG_1_IGNMULDEF","FLAG_1_INITFIRST","FLAG_1_INTERPOSE","FLAG_1_LOADFLTR","FLAG_1_NODEFLIB","FLAG_1_NODELETE","FLAG_1_NODIRECT","FLAG_1_NODUMP","FLAG_1_NOHDR","FLAG_1_NOKSYMS","FLAG_1_NOOPEN","FLAG_1_NORELOC","FLAG_1_NOW","FLAG_1_ORIGIN","FLAG_1_PIE","FLAG_1_SINGLETON","FLAG_1_STUB","FLAG_1_SYMINTPOSE","FLAG_1_TRANS","Fini","FiniArray","FiniArraySize","Flags","Flags1","Hash","Init","InitArray","InitArraySize","JmpRel","Needed","Null","OsSpecific","PltRel","PltRelSize","Pltgot","PreInitArray","PreInitArraySize","ProcessorSpecific","RPath","Rel","RelEnt","RelSize","Rela","RelaEnt","RelaSize","RunPath","SoName","StrSize","StrTab","SymEnt","SymTab","SymTabShIndex","Symbolic","Tag","Tag_","TextRel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","fmt","fmt","fmt","from","from","from","get_ptr","get_ptr","get_tag","get_tag","get_val","get_val","into","into","into","ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","HashTable","borrow","borrow_mut","clone","fmt","from","get_bucket","get_chain","hash","into","lookup","try_from","try_into","type_id","0","AArch64","Aix","Arm","BPF","BigEndian","Class","Class_","Core","Current","Data","Data_","Executable","FreeBSD","Header","Header32","Header64","HeaderPt1","HeaderPt2","HeaderPt2_","HpUx","Ia64","Irix","Linux","LittleEndian","MAGIC","Machine","Machine_","Mips","NetBSD","None","None","None","None","None","OpenBSD","OpenVMS","OsAbi","OsAbi_","Other","Other","Other","Other","Other","PowerPC","ProcessorSpecific","RISC_V","Relocatable","SharedObject","SixtyFour","Solaris","Sparc","SuperH","SystemV","ThirtyTwo","Type","Type_","Version","Version_","X86","X86_64","abi_version","as_class","as_data","as_machine","as_os_abi","as_type","as_version","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","data","data","entry_point","entry_point","eq","eq","eq","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","header_size","header_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_none","is_none","is_none","is_none","is_none","is_none","machine","machine","magic","ne","ne","ne","ne","ne","ne","ne","os_abi","os_abi","padding","parse_header","ph_count","ph_count","ph_entry_size","ph_entry_size","ph_offset","ph_offset","pt1","pt2","sanity_check","sh_count","sh_count","sh_entry_size","sh_entry_size","sh_offset","sh_offset","sh_str_index","sh_str_index","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","0","0","0","0","0","0","0","0","0","Dynamic","Dynamic32","Dynamic64","Empty","FLAG_MASKOS","FLAG_MASKPROC","FLAG_R","FLAG_W","FLAG_X","Flags","GnuRelro","Interp","Load","Note","Note64","Null","OsSpecific","Ph32","Ph64","Phdr","ProcessorSpecific","ProgramHeader","ProgramHeader32","ProgramHeader64","ProgramIter","SegmentData","ShLib","TYPE_GNU_RELRO","TYPE_HIOS","TYPE_HIPROC","TYPE_LOOS","TYPE_LOPROC","Tls","Type","Type_","Undefined","align","align","align","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","eq","eq","file","file_size","file_size","file_size","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_data","get_data","get_data","get_type","get_type","get_type","into","into","into","into","into","into","into","into","into_iter","is_execute","is_read","is_write","mem_size","mem_size","mem_size","ne","ne","next","next_index","offset","offset","offset","parse_program_header","physical_addr","physical_addr","physical_addr","raw_data","raw_data","sanity_check","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","virtual_addr","virtual_addr","virtual_addr","0","0","0","0","0","0","1","0","0","COMPRESS_HIOS","COMPRESS_HIPROC","COMPRESS_LOOS","COMPRESS_LOPROC","CompressionHeader32","CompressionHeader64","CompressionType","CompressionType_","DynSym","DynSymbolTable32","DynSymbolTable64","Dynamic","Dynamic32","Dynamic64","Empty","FiniArray","FnArray32","FnArray64","GRP_COMDAT","GRP_MASKOS","GRP_MASKPROC","Group","Group","Hash","HashTable","InitArray","NoBits","Note","Note64","NoteHeader","Null","OsSpecific","OsSpecific","PreInitArray","ProcessorSpecific","ProcessorSpecific","ProgBits","Rel","Rel","Rel32","Rel64","Rela","Rela","Rela32","Rela64","SHF_ALLOC","SHF_COMPRESSED","SHF_EXECINSTR","SHF_GROUP","SHF_INFO_LINK","SHF_LINK_ORDER","SHF_MASKOS","SHF_MASKPROC","SHF_MERGE","SHF_OS_NONCONFORMING","SHF_STRINGS","SHF_TLS","SHF_WRITE","SHN_ABS","SHN_COMMON","SHN_HIOS","SHN_HIPROC","SHN_HIRESERVE","SHN_LOOS","SHN_LOPROC","SHN_LORESERVE","SHN_UNDEF","SHN_XINDEX","SHT_HIOS","SHT_HIPROC","SHT_HIUSER","SHT_LOOS","SHT_LOPROC","SHT_LOUSER","SectionData","SectionHeader","SectionHeader_","SectionIter","SectionStrings","Sh32","Sh64","ShLib","ShType","ShType_","StrArray","StrTab","SymTab","SymTabShIndex","SymTabShIndex","SymbolTable32","SymbolTable64","Undefined","User","Zlib","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","desc","eq","eq","file","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_addend","get_addend","get_data","get_name","get_offset","get_offset","get_offset","get_offset","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_symbol_table_index","get_type","get_type","get_type","get_type","get_type","info","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","link","name","name","ne","ne","next","next","next_index","offset","parse_section_header","raw_data","sanity_check","size","strings","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","flags","indicies","0","0","0","0","0","Binding","Binding_","Common","Default","DynEntry32","DynEntry64","Entry","Entry32","Entry64","File","Func","Global","Hidden","Internal","Local","NoType","Object","OsSpecific","OsSpecific","ProcessorSpecific","ProcessorSpecific","Protected","Section","Tls","Type","Type_","Visibility","Visibility_","Weak","as_binding","as_type","as_visibility","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_binding","get_name","get_name","get_name","get_name","get_name","get_other","get_section_header","get_type","info","info","info","info","info","into","into","into","into","into","into","into","into","into","into","name","name","name","name","name","ne","ne","other","other","other","other","other","shndx","shndx","shndx","shndx","shndx","size","size","size","size","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","0","0","0","0"],"q":["xmas_elf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::dynamic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::dynamic::Tag","","xmas_elf::hash","","","","","","","","","","","","","","xmas_elf::headerxmas_elf::header::Class","xmas_elf::header::Data","xmas_elf::header::HeaderPt2","","xmas_elf::header::Machine","xmas_elf::header::OsAbi","xmas_elf::header::Type","xmas_elf::header::Version","xmas_elf::program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::program::ProgramHeader","","xmas_elf::program::SegmentData","","","","","xmas_elf::program::Type","","xmas_elf::sections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::sections::CompressionType","","xmas_elf::sections::SectionData","","","","","","","","","","","","","","","","","","","","xmas_elf::sections::SectionHeader","","xmas_elf::sections::ShType","","","xmas_elf::symbol_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmas_elf::symbol_table::Binding","","xmas_elf::symbol_table::Type",""],"d":["","A trait for things that are common ELF conventions but not …","","","","","","","","","","Parse and return the value of the .note.gnu.build-id …","","Parse and return the value of the .gnu_debuglink section, …i":[0,0,0,0,1,1,0,1,1,1,1,2,1,2,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,4,5,3,4,5,3,5,3,4,5,5,3,4,5,3,4,4,4,4,4,4,4,5,3,3,4,5,3,4,5,3,4,5,3,6,7,0,8,8,8,8,8,8,8,0,8,8,8,8,8,9,10,11,10,10,12,0,0,13,14,0,0,13,11,0,15,15,0,0,0,11,10,11,11,12,0,0,0,10,11,16,12,14,13,10,11,11,0,0,16,12,14,11,10,10,13,10,13,13,16,11,10,10,11,16,0,0,0,0,10,10,17,18,19,20,21,9,22,23,17,15,24,18,16,19,12,22,14,21,11,9,13,20,10,23,17,15,24,18,16,19,12,22,14,21,11,9,13,20,10,17,17,23,17,15,18,16,19,12,22,14,21,11,9,13,20,10,17,17,15,24,18,16,12,14,11,13,10,24,23,23,17,15,15,24,24,18,16,19,12,22,14,21,11,9,13,20,10,23,17,15,24,18,16,19,12,22,14,21,11,9,13,20,10,15,24,23,17,15,24,18,16,19,12,22,14,21,11,9,13,20,10,18,16,19,12,22,14,15,24,17,18,16,12,14,11,13,10,17,17,17,0,15,24,15,24,15,24,23,23,0,15,24,15,24,15,24,15,24,15,23,17,15,24,18,16,19,12,22,14,21,11,9,13,20,10,23,17,15,24,18,16,19,12,22,14,21,11,9,13,20,10,15,24,23,17,15,24,18,16,19,12,22,14,21,11,9,13,20,10,17,15,17,24,25,26,27,28,29,30,31,32,33,34,35,35,35,0,0,0,0,0,0,34,34,34,34,35,34,34,36,36,34,34,0,0,0,0,0,34,0,0,0,0,0,34,0,0,35,36,37,38,39,36,37,38,33,40,34,35,39,36,37,38,33,40,34,35,39,36,37,38,33,40,34,37,38,33,40,33,34,39,36,37,38,36,37,38,39,36,36,37,37,38,38,33,33,33,33,40,34,35,39,36,37,38,33,40,34,35,36,37,38,36,37,38,39,36,37,38,33,40,34,35,39,33,33,33,36,37,38,33,34,39,39,36,37,38,0,36,37,38,37,38,0,39,36,37,38,33,40,34,35,39,36,37,38,33,40,34,35,37,38,39,36,37,38,33,40,34,35,36,37,38,41,42,43,44,45,46,46,47,48,0,0,0,0,0,0,0,0,49,50,50,49,50,50,50,49,50,50,0,0,0,49,50,49,50,49,49,49,50,0,49,49,51,49,49,51,49,0,49,50,50,0,49,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,49,0,0,50,49,49,49,50,50,50,50,49,51,52,53,52,54,55,49,50,56,57,58,59,51,60,61,62,53,52,54,55,49,50,56,57,58,59,51,60,61,62,53,52,55,49,57,58,59,51,62,62,49,51,53,52,53,52,52,54,55,49,50,56,57,58,59,51,60,61,62,53,52,54,55,49,50,56,57,58,59,51,60,61,62,60,60,52,52,60,60,61,61,60,60,61,61,52,60,60,61,61,52,53,52,54,55,49,50,56,57,58,59,51,60,61,62,53,56,52,52,62,49,51,53,56,53,52,0,52,0,52,50,53,52,54,55,49,50,56,57,58,59,51,60,61,62,53,52,54,55,49,50,56,57,58,59,51,60,61,62,52,62,53,52,54,55,49,50,56,57,58,59,51,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,74,82,82,83,84,85,86,87,0,0,88,89,0,0,0,0,0,88,88,90,89,89,90,88,88,90,88,90,88,89,88,88,0,0,0,0,90,91,92,93,94,95,96,97,93,89,91,90,92,88,94,95,96,97,93,89,91,90,92,88,93,89,91,90,92,88,90,88,98,94,95,96,97,93,89,91,90,92,88,94,95,96,97,93,89,91,90,92,88,98,98,94,95,96,97,98,98,98,98,94,95,96,97,94,95,96,97,93,89,91,90,92,88,98,94,95,96,97,90,88,98,94,95,96,97,98,94,95,96,97,98,94,95,96,97,94,95,96,97,93,89,91,90,92,88,94,95,96,97,93,89,91,90,92,88,94,95,96,97,93,89,91,90,92,88,98,94,95,96,97,99,100,101,102],"f":[null,null,null,null,[[]],[[]],null,[[["str",15]],["option",4,[["sectionheader",4]]]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["result",4,[["str",15],["str",15]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["result",4,[["str",15],["str",15]]]],[[["u32",15]],["result",4,[["str",15],["str",15]]]],null,null,null,null,[[]],[[],["result",4,[["elffile",3],["str",15]]]],null,[[["u16",15]],["result",4,[["programheader",4],["str",15]]]],[[],["programiter",3]],[[["u16",15]],["result",4,[["sectionheader",4],["str",15]]]],[[],["sectioniter",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["tag_",3]],[[["tag",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4,[["p64",6],["str",15]]]],[[],["result",4,[["p32",6],["str",15]]]],[[],["result",4,[["tag",4,[["p32",6]]],["str",15]]]],[[],["result",4,[["tag",4,[["p64",6]]],["str",15]]]],[[],["result",4,[["p64",6],["str",15]]]],[[],["result",4,[["p32",6],["str",15]]]],[[]],[[]],[[]],[[["tag",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[],["hashtable",3]],[[["formatter",3]],["result",6]],[[]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["str",15]],["u32",15]],[[]],[[["str",15]],["entry",8]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["class",4]],[[],["data",4]],[[],["machine",4]],[[],["osabi",4]],[[],["type",4]],[[],["version",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["class",4]],null,[[],["header",3]],[[],["headerpt1",3]],[[],["headerpt2",4]],[[],["class_",3]],[[],["class",4]],[[],["data_",3]],[[],["data",4]],[[],["version_",3]],[[],["version",4]],[[],["osabi_",3]],[[],["osabi",4]],[[],["type_",3]],[[],["type",4]],[[],["machine_",3]],[[],["machine",4]],[[],["data",4]],null,[[],["u64",15]],null,[[["class_",3]],["bool",15]],[[["class",4]],["bool",15]],[[["data",4]],["bool",15]],[[["version",4]],["bool",15]],[[["osabi",4]],["bool",15]],[[["type",4]],["bool",15]],[[["machine",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["machine_",3]],null,null,[[["class_",3]],["bool",15]],[[["class",4]],["bool",15]],[[["data",4]],["bool",15]],[[["version",4]],["bool",15]],[[["osabi",4]],["bool",15]],[[["type",4]],["bool",15]],[[["machine",4]],["bool",15]],[[],["osabi",4]],null,null,[[],["result",4,[["header",3],["str",15]]]],[[],["u16",15]],null,[[],["u16",15]],null,[[],["u64",15]],null,null,null,[[["elffile",3]],["result",4,[["str",15]]]],[[],["u16",15]],null,[[],["u16",15]],null,[[],["u64",15]],null,[[],["u16",15]],null,[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type_",3]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["version",4]],[[],["u32",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["programiter",3]],[[],["programheader",4]],[[],["programheader32",3]],[[],["programheader64",3]],[[],["flags",3]],[[],["type_",3]],[[],["type",4]],[[],["programheader32",3]],[[],["programheader64",3]],[[],["flags",3]],[[],["type_",3]],[[["flags",3]],["bool",15]],[[["type",4]],["bool",15]],null,[[],["u64",15]],null,null,[[],["flags",3]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["elffile",3]],["result",4,[["segmentdata",4],["str",15]]]],[[["elffile",3]],["result",4,[["segmentdata",4],["str",15]]]],[[["elffile",3]],["result",4,[["segmentdata",4],["str",15]]]],[[],["result",4,[["type",4],["str",15]]]],[[],["result",4,[["type",4],["str",15]]]],[[],["result",4,[["type",4],["str",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u64",15]],null,null,[[["flags",3]],["bool",15]],[[["type",4]],["bool",15]],[[],["option",4]],null,[[],["u64",15]],null,null,[[["header",3],["u16",15]],["result",4,[["programheader",4],["str",15]]]],[[],["u64",15]],null,null,[[["elffile",3]]],[[["elffile",3]]],[[["programheader",4],["elffile",3]],["result",4,[["str",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["sectioniter",3]],[[],["sectionheader",4]],[[],["shtype_",3]],[[],["shtype",4]],[[],["compressionheader64",3]],[[],["compressionheader32",3]],[[],["compressiontype_",3]],[[],["compressiontype",4]],[[],["noteheader",3]],[[]],[[["shtype",4]],["bool",15]],[[["compressiontype",4]],["bool",15]],null,[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u32",15]],[[["elffile",3]],["result",4,[["sectiondata",4],["str",15]]]],[[["elffile",3]],["result",4,[["str",15],["str",15]]]],[[],["u64",15]],[[],["u32",15]],[[],["u64",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["result",4,[["shtype",4],["str",15]]]],[[],["u32",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["str",15]],[[["shtype",4]],["bool",15]],[[["compressiontype",4]],["bool",15]],[[],["option",4]],[[],["option",4,[["str",15]]]],null,[[],["u64",15]],[[["header",3],["u16",15]],["result",4,[["sectionheader",4],["str",15]]]],[[["elffile",3]]],[[["sectionheader",4],["elffile",3]],["result",4,[["str",15]]]],[[],["u64",15]],[[],["result",4,[["sectionstrings",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["shtype_",3]],[[],["u32",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["binding",4],["str",15]]]],[[],["result",4,[["type",4],["str",15]]]],[[],["visibility",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["visibility_",3]],[[],["visibility",4]],[[],["binding_",3]],[[],["binding",4]],[[],["type_",3]],[[],["type",4]],[[["binding",4]],["bool",15]],[[["type",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["binding",4],["str",15]]]],[[["elffile",3]],["result",4,[["str",15],["str",15]]]],[[["elffile",3]],["result",4,[["str",15],["str",15]]]],[[["elffile",3]],["result",4,[["str",15],["str",15]]]],[[["elffile",3]],["result",4,[["str",15],["str",15]]]],[[["elffile",3]],["result",4,[["str",15],["str",15]]]],[[],["visibility",4]],[[["elffile",3],["usize",15]],["result",4,[["sectionheader",4],["str",15]]]],[[],["result",4,[["type",4],["str",15]]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["binding",4]],["bool",15]],[[["type",4]],["bool",15]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["visibility_",3]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,null,null,null],"p":[[3,"ElfFile"],[8,"Extensions"],[4,"Tag"],[3,"Dynamic"],[3,"Tag_"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[3,"HashTable"],[3,"Type_"],[4,"Machine"],[4,"OsAbi"],[4,"Data"],[4,"Type"],[4,"Version"],[4,"HeaderPt2"],[4,"Class"],[3,"HeaderPt1"],[3,"Class_"],[3,"Data_"],[3,"Machine_"],[3,"OsAbi_"],[3,"Version_"],[3,"Header"],[3,"HeaderPt2_"],[13,"Other"],[13,"Other"],[13,"Header32"],[13,"Header64"],[13,"Other"],[13,"Other"],[13,"ProcessorSpecific"],[13,"Other"],[3,"Flags"],[4,"Type"],[4,"SegmentData"],[4,"ProgramHeader"],[3,"ProgramHeader32"],[3,"ProgramHeader64"],[3,"ProgramIter"],[3,"Type_"],[13,"Ph32"],[13,"Ph64"],[13,"Undefined"],[13,"Dynamic32"],[13,"Dynamic64"],[13,"Note64"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[4,"ShType"],[4,"SectionData"],[4,"CompressionType"],[4,"SectionHeader"],[3,"SectionIter"],[3,"SectionHeader_"],[3,"ShType_"],[3,"SectionStrings"],[3,"CompressionHeader64"],[3,"CompressionHeader32"],[3,"CompressionType_"],[3,"Rela"],[3,"Rel"],[3,"NoteHeader"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"Undefined"],[13,"StrArray"],[13,"FnArray32"],[13,"FnArray64"],[13,"SymbolTable32"],[13,"SymbolTable64"],[13,"DynSymbolTable32"],[13,"DynSymbolTable64"],[13,"SymTabShIndex"],[13,"Note64"],[13,"Rela32"],[13,"Rela64"],[13,"Rel32"],[13,"Rel64"],[13,"Dynamic32"],[13,"Dynamic64"],[13,"HashTable"],[13,"Group"],[13,"Sh32"],[13,"Sh64"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"User"],[4,"Type"],[4,"Visibility"],[4,"Binding"],[3,"Binding_"],[3,"Type_"],[3,"Visibility_"],[3,"Entry32"],[3,"Entry64"],[3,"DynEntry32"],[3,"DynEntry64"],[8,"Entry"],[13,"OsSpecific"],[13,"ProcessorSpecific"],[13,"OsSpecific"],[13,"ProcessorSpecific"]]},\
"zero":{"doc":"Functions for reading binary data into Rust data …","t":[8,3,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,11,11,11,11],"n":["Pod","StrReaderIterator","borrow","borrow_mut","clone","fmt","from","into","into_iter","next","read","read_array","read_array_unsafe","read_str","read_str_unsafe","read_strs_to_null","read_unsafe","size_hint","try_from","try_into","type_id"],"q":["zero","","","","","","","","","","","","","","","","","","","",""],"d":["Implementing this trait means that the concrete type is …","Iterates over <code>self.data</code>, yielding strings (null-terminated …","","","","","","","","","Reads a single <code>T</code> from <code>input</code>.","Read an array of <code>T</code>s from input.","Reads an array of <code>T</code>s from <code>input</code> with no checks.","Read a string from <code>input</code>. The string must be a …","Reads a null-terminated string from <code>input</code> with no checks.","Returns an iterator which will return a sequence of …","Reads a <code>T</code> from <code>input</code> with no checks.","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],"f":[null,null,[[]],[[]],[[],["strreaderiterator",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["option",4,[["str",15]]]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["strreaderiterator",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"StrReaderIterator"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};